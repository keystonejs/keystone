diff --git a/package.json b/package.json
index 434ad16..b5ed657 100644
--- a/package.json
+++ b/package.json
@@ -71,6 +71,7 @@
     "pluralize": "^7.0.0",
     "prettier": "^1.12.1",
     "prop-types": "^15.6.1",
+    "qs": "^6.5.2",
     "raf-schd": "^2.1.1",
     "react": "^16.3.1",
     "react-apollo": "^2.1.3",
@@ -88,7 +89,8 @@
     "react-transition-group": "^2.3.1",
     "to-pascal-case": "^1.0.0",
     "webpack": "^4.5.0",
-    "webpack-dev-middleware": "^3.1.2"
+    "webpack-dev-middleware": "^3.1.2",
+    "xss": "^1.0.3"
   },
   "prettier": {
     "proseWrap": "preserve",
diff --git a/packages/admin-ui/client/components/Nav.js b/packages/admin-ui/client/components/Nav.js
index 7734550..c96d098 100644
--- a/packages/admin-ui/client/components/Nav.js
+++ b/packages/admin-ui/client/components/Nav.js
@@ -6,6 +6,8 @@ import {
   TelescopeIcon,
   MarkGithubIcon,
   SignOutIcon,
+  SignInIcon,
+  EllipsisIcon,
 } from '@keystonejs/icons';
 
 import {
@@ -16,12 +18,13 @@ import {
 } from '@keystonejs/ui/src/primitives/navigation';
 import { A11yText } from '@keystonejs/ui/src/primitives/typography';
 import { withAdminMeta } from '../providers/AdminMeta';
+import SessionProvider from '../providers/Session';
 
 const GITHUB_PROJECT = 'https://github.com/keystonejs/keystone-5';
 
 const Nav = props => {
   const {
-    adminMeta: { getListByKey, listKeys, adminPath, graphiqlPath },
+    adminMeta: { withAuth, getListByKey, listKeys, adminPath, graphiqlPath, signoutUrl, signinUrl, sessionUrl },
     location,
   } = props;
   return (
@@ -65,11 +68,36 @@ const Nav = props => {
           <TelescopeIcon />
           <A11yText>Style Guide</A11yText>
         </PrimaryNavItem>
-        <NavSeparator />
-        <PrimaryNavItem to={`${adminPath}/signin`} title="Sign Out">
-          <SignOutIcon />
-          <A11yText>Sign Out</A11yText>
-        </PrimaryNavItem>
+        {withAuth ? (
+          <Fragment>
+            <NavSeparator />
+            <SessionProvider {...{ signinUrl, signoutUrl, sessionUrl }}>
+              {({ user, isLoading }) => {
+                if (isLoading) {
+                  return (
+                    <PrimaryNavItem title="Loading login info">
+                      <EllipsisIcon />
+                      <A11yText>Loading login info</A11yText>
+                    </PrimaryNavItem>
+                  );
+                } else if (user) {
+                  return (
+                    <PrimaryNavItem to={signoutUrl} title="Sign Out">
+                      <SignOutIcon />
+                      <A11yText>Sign Out</A11yText>
+                    </PrimaryNavItem>
+                  );
+                }
+                return (
+                  <PrimaryNavItem to={signinUrl} title="Sign In">
+                    <SignInIcon />
+                    <A11yText>Sign In</A11yText>
+                  </PrimaryNavItem>
+                );
+              }}
+            </SessionProvider>
+          </Fragment>
+        ) : null}
       </NavGroup>
     </PrimaryNav>
   );
diff --git a/packages/admin-ui/client/index.js b/packages/admin-ui/client/index.js
index 257d970..60a27c7 100644
--- a/packages/admin-ui/client/index.js
+++ b/packages/admin-ui/client/index.js
@@ -13,7 +13,8 @@ import AdminMetaProvider from './providers/AdminMeta';
 import apolloClient from './providers/apolloClient';
 
 import HomePage from './pages/Home';
-import SessionPage from './pages/Session';
+import SigninPage from './pages/Signin';
+import SignedoutPage from './pages/Signedout';
 import ListPage from './pages/List';
 import ListNotFoundPage from './pages/ListNotFound';
 import ItemPage from './pages/Item';
@@ -36,8 +37,13 @@ const Keystone = () => (
                   />
                   <Route
                     exact
-                    path={`${adminPath}/signin`}
-                    render={() => <SessionPage {...adminMeta} />}
+                    path={adminMeta.signinUrl}
+                    render={() => <SigninPage {...adminMeta} />}
+                  />
+                  <Route
+                    exact
+                    path={adminMeta.signoutUrl}
+                    render={() => <SignedoutPage {...adminMeta} />}
                   />
                   <Route
                     exact
diff --git a/packages/admin-ui/client/pages/Signedout.js b/packages/admin-ui/client/pages/Signedout.js
new file mode 100644
index 0000000..8a37c45
--- /dev/null
+++ b/packages/admin-ui/client/pages/Signedout.js
@@ -0,0 +1,63 @@
+import React, { Component, Fragment } from 'react';
+import styled from 'react-emotion';
+
+import SessionProvider from '../providers/Session';
+import logo from '../assets/logo.png';
+
+const Container = styled.div({
+  alignItems: 'center',
+  display: 'flex',
+  justifyContent: 'center',
+});
+
+const Box = styled.div({
+  boxShadow: '0 2px 1px #f1f1f1',
+  backgroundColor: 'white',
+  border: '1px solid #e9e9e9',
+  borderRadius: '0.3em',
+  margin: '200px auto',
+  padding: 40,
+  display: 'flex',
+  flexWrap: 'nowrap',
+  justifyContent: 'center',
+  alignItems: 'center',
+});
+
+const Divider = styled.div({
+  borderRight: '1px solid #eee',
+  minHeight: 185,
+  lineHeight: 185,
+  margin: '0 40px',
+});
+
+class SignedOut extends Component {
+  render() {
+    const { adminPath, signinUrl, signoutUrl, sessionUrl } = this.props;
+    return (
+      <Container>
+        <SessionProvider forceSignout {...{ signinUrl, signoutUrl, sessionUrl }}>
+          {({ isLoading }) => (
+            <Box>
+              <img src={logo} width="205" height="68" alt="KeystoneJS Logo" />
+              <Divider />
+              <div
+                style={{
+                  marginTop: 16,
+                }}
+              >
+                {isLoading ? 'Loading...' : (
+                  <Fragment>
+                    <p>You are signed out.</p>
+                    <p><a href={signinUrl}>Sign In</a></p>
+                  </Fragment>
+                )}
+              </div>
+            </Box>
+          )}
+        </SessionProvider>
+      </Container>
+    );
+  }
+}
+
+export default SignedOut;
diff --git a/packages/admin-ui/client/pages/Session.js b/packages/admin-ui/client/pages/Signin.js
similarity index 64%
rename from packages/admin-ui/client/pages/Session.js
rename to packages/admin-ui/client/pages/Signin.js
index a7da47b..219c451 100644
--- a/packages/admin-ui/client/pages/Session.js
+++ b/packages/admin-ui/client/pages/Signin.js
@@ -1,5 +1,7 @@
 import React, { Component } from 'react';
 import styled from 'react-emotion';
+import qs from 'qs';
+import xss from 'xss';
 
 import { Input } from '@keystonejs/ui/src/primitives/forms';
 import { Button } from '@keystonejs/ui/src/primitives/buttons';
@@ -14,7 +16,7 @@ const Container = styled.div({
   justifyContent: 'center',
 });
 
-const Box = styled.div({
+const Form = styled.form({
   boxShadow: '0 2px 1px #f1f1f1',
   backgroundColor: 'white',
   border: '1px solid #e9e9e9',
@@ -45,45 +47,51 @@ const Fields = styled.div({
   width: 280,
 });
 
+function extractAndCleanRedirectUrl() {
+  const redirectToParam = qs.parse(window.location.search.slice(1)).redirectTo;
+  if (typeof redirectToParam !== 'string') {
+    return null;
+  }
+
+  const decodedRedirectTo = decodeuricomponent(redirectToParam);
+
+  if (!decodedRedirectTo) {
+    return null;
+  }
+
+  // Reconstruct the URL without the host
+  // We do this to prevent phishing
+  const urlParts = new Url(decodedRedirectTo);
+  return `${urlParts.pathname}${urlParts.search}${urlParts.hash}`;
+}
+
 class Session extends Component {
-  state = {
-    username: '',
-    password: '',
-  };
-  onUsernameChange = event => {
-    this.setState({ username: event.target.value });
-  };
-  onPasswordChange = event => {
-    this.setState({ password: event.target.value });
-  };
   render() {
-    const { apiPath } = this.props;
-    const { username, password } = this.state;
+    const { adminPath, signinUrl, signoutUrl, sessionUrl } = this.props;
+    const redirectTo = extractAndCleanRedirectUrl() || adminPath;
     return (
       <Container>
-        <SessionProvider apiPath={apiPath}>
-          {({ user, signIn, signOut, isLoading }) => (
-            <Box>
+        <SessionProvider {...{ signinUrl, signoutUrl, sessionUrl }}>
+          {({ user, signOut, isLoading }) => (
+            <Form method="post" action={signinUrl}>
               <img src={logo} width="205" height="68" alt="KeystoneJS Logo" />
               <Divider />
               <div>
                 <Fields>
                   <FieldLabel>Email</FieldLabel>
-                  <Input onChange={this.onUsernameChange} value={username} />
+                  <Input name="username" />
                   <FieldLabel>Password</FieldLabel>
-                  <Input
-                    type="password"
-                    onChange={this.onPasswordChange}
-                    value={password}
-                  />
+                  <Input type="password" name="password" />
+                  <input type="hidden" name="redirectTo" value={xss(redirectTo)} />
                 </Fields>
                 <Button
                   appearance="primary"
-                  onClick={() => signIn({ username, password })}
                   style={{ marginRight: 16 }}
+                  type="submit"
                 >
                   Sign In
                 </Button>
+                {/* TODO: Change this to a straigh <a> tag */}
                 <Button variant="subtle" appearance="danger" onClick={signOut}>
                   Sign Out
                 </Button>
@@ -99,7 +107,7 @@ class Session extends Component {
                       : 'Signed Out'}
                 </div>
               </div>
-            </Box>
+            </Form>
           )}
         </SessionProvider>
       </Container>
diff --git a/packages/admin-ui/client/providers/Session.js b/packages/admin-ui/client/providers/Session.js
index 3906834..061f1a1 100644
--- a/packages/admin-ui/client/providers/Session.js
+++ b/packages/admin-ui/client/providers/Session.js
@@ -6,6 +6,7 @@ function getJSON(url) {
     credentials: 'same-origin',
     headers: {
       'content-type': 'application/json',
+      'Accept': 'application/json',
     },
     mode: 'cors',
     redirect: 'follow',
@@ -19,6 +20,7 @@ function postJSON(url, data = {}) {
     credentials: 'same-origin',
     headers: {
       'content-type': 'application/json',
+      'Accept': 'application/json',
     },
     method: 'POST',
     mode: 'cors',
@@ -31,30 +33,55 @@ class Session extends Component {
     session: {},
     isLoading: true,
   };
+
+  constructor(props) {
+    super(props);
+    this.triggerSignoutFlow(props, this.state);
+  }
+
+  triggerSignoutFlow = (props, state) => {
+    if (state.isLoading) {
+      return;
+    }
+    if (props.forceSignout && state.session && state.session.signedIn) {
+      this.signOut();
+      return;
+    }
+  }
+
+  componentDidUpdate(prevProps, prevState, snapshot) {
+    if (
+      prevState.isLoading !== this.state.isLoading
+      || prevState.session !== this.state.session
+      || prevProps.forceSignout !== this.props.forceSignout
+    ) {
+      this.triggerSignoutFlow(this.props, this.state);
+    }
+  }
+
   componentDidMount() {
     this.getSession();
   }
+
   getSession = () => {
-    const { apiPath } = this.props;
-    this.setState({ isLoading: true });
-    getJSON(`${apiPath}/session`).then(data => {
+    const { sessionUrl } = this.props;
+    // Avoid an extra re-render
+    if (!this.state.isLoading) {
+      this.setState({ isLoading: true });
+    }
+    getJSON(sessionUrl).then(data => {
       this.setState({ session: data, isLoading: false });
     });
   };
-  signIn = ({ username, password }) => {
-    const { apiPath } = this.props;
-    postJSON(`${apiPath}/signin`, { username, password })
-      .then(() => this.getSession())
-      .catch(error => console.error(error));
-  };
   signOut = () => {
-    const { apiPath } = this.props;
-    postJSON(`${apiPath}/signout`)
+    const { signoutUrl } = this.props;
+    this.setState({ isLoading: true });
+    postJSON(signoutUrl)
       .then(() => this.getSession())
       .catch(error => console.error(error));
   };
   render() {
-    const { signIn, signOut } = this;
+    const { signOut } = this;
     const { children } = this.props;
     const {
       session: { user, signedIn: isSignedIn },
@@ -63,7 +90,6 @@ class Session extends Component {
     return children({
       isLoading,
       isSignedIn,
-      signIn,
       signOut,
       user,
     });
diff --git a/packages/admin-ui/package.json b/packages/admin-ui/package.json
index 309d399..79b3a27 100644
--- a/packages/admin-ui/package.json
+++ b/packages/admin-ui/package.json
@@ -36,6 +36,7 @@
     "graphql-tag": "^2.8.0",
     "html-webpack-plugin": "^3.2.0",
     "prop-types": "^15.6.1",
+    "qs": "^6.5.2",
     "react": "^16.3.1",
     "react-apollo": "^2.1.3",
     "react-copy-to-clipboard": "^5.0.1",
@@ -46,6 +47,7 @@
     "react-router-dom": "^4.2.2",
     "react-select": "^2.0.0-beta.2",
     "webpack": "^4.5.0",
-    "webpack-dev-middleware": "^3.1.2"
+    "webpack-dev-middleware": "^3.1.2",
+    "xss": "^1.0.3"
   }
 }
\ No newline at end of file
diff --git a/packages/admin-ui/server/AdminUI.js b/packages/admin-ui/server/AdminUI.js
index 3b0980f..0b97c36 100644
--- a/packages/admin-ui/server/AdminUI.js
+++ b/packages/admin-ui/server/AdminUI.js
@@ -1,3 +1,4 @@
+const qs = require('qs');
 const bodyParser = require('body-parser');
 const express = require('express');
 const session = require('express-session');
@@ -8,13 +9,49 @@ const { graphqlExpress, graphiqlExpress } = require('apollo-server-express');
 
 const getWebpackConfig = require('./getWebpackConfig');
 
+function injectQueryParams({ url, params, overwrite = true }) {
+  const parsedUrl = new URL(url);
+  let queryObject = qs.parse(parsedUrl.search.slice(1));
+  if (overwrite) {
+    queryObject = {
+      ...queryObject,
+      ...params,
+    };
+  } else {
+    queryObject = {
+      ...params,
+      ...queryObject,
+    };
+  }
+  parsedUrl.search = qs.stringify(queryObject);
+  return parsedUrl.toString();
+}
+
+function getAbsoluteUrl(req, path) {
+  return `${req.protocol}://${req.get('host')}${path}`;
+}
+
 module.exports = class AdminUI {
-  constructor(keystone, { adminPath = '/admin' }) {
+  constructor(keystone, config) {
     this.keystone = keystone;
-    this.adminPath = adminPath;
-    this.graphiqlPath = `${adminPath}/graphiql`;
+
+    if (config.adminPath === '/') {
+      throw new Error("Admin path cannot be the root path. Try; '/admin'");
+    }
+
+    this.adminPath = config.adminPath;
+    // TODO: Figure out how to have auth & non-auth URLs share the same path
+    this.adminAuthPath = `${config.adminPath}_auth`;
+    this.graphiqlPath = `${this.adminPath}/graphiql`;
     this.apiPath = `${this.adminPath}/api`;
 
+    this.config = {
+      ...config,
+      signinUrl: `${this.adminAuthPath}/signin`,
+      signoutUrl: `${this.adminAuthPath}/signout`,
+      sessionUrl: `${this.adminAuthPath}/session`,
+    },
+
     this.signin = this.signin.bind(this);
     this.signout = this.signout.bind(this);
     this.session = this.session.bind(this);
@@ -22,63 +59,140 @@ module.exports = class AdminUI {
 
   async signin(req, res, next) {
     try {
+      // TODO: Don't hard code this auth strategy, use the one passed in
+      // TODO: How could we support, for example, the twitter auth flow?
       const result = await this.keystone.auth.User.password.validate({
         username: req.body.username,
         password: req.body.password,
       });
+
       if (!result.success) {
-        return res.json({
-          success: false,
+        const htmlResponse = () => {
+          const signinUrl = this.config.signinUrl;
+          /*
+           * This works, but then webpack (or react-router?) is unable to match
+           * the URL when there's a query param, which is... odd :/
+          const signinUrl = injectQueryParams({
+            url: getAbsoluteUrl(req, this.config.signinUrl),
+            params: { redirectTo: req.body.redirectTo },
+            overwrite: false,
+          });
+          */
+
+          // TODO - include some sort of error in the page
+          res.redirect(signinUrl);
+        };
+        return res.format({
+          'default': htmlResponse,
+          'text/html': htmlResponse,
+          'application/json': () => res.json({ success: false }),
         });
       }
+
       await this.keystone.session.create(req, result);
-      res.json({
-        success: true,
-      });
     } catch (e) {
-      next(e);
+      return next(e);
     }
+
+    const htmlResponse = () => res.redirect(req.body.redirectTo || admin.adminPath);
+    return res.format({
+      'default': htmlResponse,
+      'text/html': htmlResponse,
+      'application/json': () => res.json({ success: true }),
+    });
   }
 
   async signout(req, res, next) {
     try {
       await this.keystone.session.destroy(req);
-      res.json({
-        success: true,
-      });
     } catch (e) {
-      next(e);
+      return next(e);
     }
+
+    return res.format({
+      'default': () => {
+        next();
+      },
+      'text/html': () => {
+        next();
+      },
+      'application/json': () => {
+        res.json({ success: true });
+      }
+    });
   }
 
   session(req, res) {
-    res.json({
+    const result = {
       signedIn: !!req.user,
       user: req.user ? { id: req.user.id, name: req.user.name } : undefined,
-    });
+    };
+    res.json(result);
+  }
+
+  getAdminMeta() {
+    return {
+      withAuth: !!this.config.authStrategy,
+      adminAuthPath: this.config.adminAuthPath,
+      signinUrl: this.config.signinUrl,
+      signoutUrl: this.config.signoutUrl,
+      sessionUrl: this.config.sessionUrl,
+    }
   }
 
   createSessionMiddleware({ cookieSecret }) {
+    if (!this.config.authStrategy) {
+      return (req, res, next) => next();
+    }
+
     const app = express();
 
+    const sessionHandler = session({
+      secret: cookieSecret,
+      resave: false,
+      saveUninitialized: false,
+      name: 'keystone-admin.sid',
+    });
+
     // implement session management
-    app.use(
-      this.adminPath,
-      session({
-        secret: cookieSecret,
-        resave: false,
-        saveUninitialized: false,
-        name: 'keystone-admin.sid',
-      })
-    );
-    app.post(`${this.apiPath}/signin`, bodyParser.json(), this.signin);
-    app.post(`${this.apiPath}/signout`, this.signout);
+    app.use(this.adminPath, sessionHandler);
+    app.use(this.adminAuthPath, sessionHandler);
+
+    // NOTE: These are POST only. The GET versions (the UI) are handled by the
+    // main server
+    app.post(this.config.signinUrl, bodyParser.json(), bodyParser.urlencoded(), this.signin);
+    app.post(this.config.signoutUrl, this.signout);
     app.use(
       this.keystone.session.validate({
         valid: ({ req, item }) => (req.user = item),
       })
     );
-    app.get(`${this.apiPath}/session`, this.session);
+    app.get(this.config.sessionUrl, this.session);
+
+    // NOTE: No auth check on this.adminAuthPath, that's because we rely on the
+    // UI code to only handle the signin/signout routes.
+    // THIS IS NOT SECURE! We need proper server-side handling of this, and
+    // split the signin/out pages into their own bundle so we don't leak admin
+    // data to the browser.
+    const authCheck = (req, res, next) => {
+      if (!req.user) {
+        const signinUrl = this.config.signinUrl;
+        /*
+         * This works, but then webpack (or react-router?) is unable to match
+         * the URL when there's a query param, which is... odd :/
+        const signinUrl = injectQueryParams({
+          url: getAbsoluteUrl(req, this.config.signinUrl),
+          params: { redirectTo: req.originalUrl },
+          overwrite: true,
+        });
+        */
+        return res.status(401).redirect(signinUrl);
+      }
+      // All logged in, so move on to the next matching route
+      next();
+    };
+    app.use(`${this.adminPath}`, authCheck);
+    app.use(`${this.adminPath}/*`, authCheck);
     return app;
   }
 
@@ -102,18 +216,27 @@ module.exports = class AdminUI {
     const app = express();
 
     // ensure any non-resource requests are rewritten for history api fallback
-    app.use(this.adminPath, (req, res, next) => {
+    const nonResourceRewrite = (req, res, next) => {
       if (/^[\w\/\-]+$/.test(req.url)) req.url = '/';
       next();
-    });
+    };
+    app.use(this.adminPath, nonResourceRewrite);
+    app.use(this.adminAuthPath, nonResourceRewrite);
 
     // add the webpack dev middleware
+    // TODO: Replace with local server so we can add ACL / stop leaking admin
+    // data when not logged in
     const webpackConfig = getWebpackConfig({
-      adminMeta: this.keystone.getAdminMeta(),
+      adminMeta: {
+        ...this.getAdminMeta(),
+        ...this.keystone.getAdminMeta(),
+      },
+      publicPath: this.adminPath,
       adminPath: this.adminPath,
       apiPath: this.apiPath,
       graphiqlPath: this.graphiqlPath,
     });
+
     const compiler = webpack(webpackConfig);
     this.webpackMiddleware = webpackDevMiddleware(compiler, {
       publicPath: webpackConfig.output.publicPath,
@@ -121,6 +244,25 @@ module.exports = class AdminUI {
     });
     app.use(this.webpackMiddleware);
 
+    if (this.config.authStrategy) {
+      const authWebpackConfig = getWebpackConfig({
+        adminMeta: {
+          ...this.getAdminMeta(),
+          ...this.keystone.getAdminMeta(),
+        },
+        publicPath: this.adminAuthPath,
+        adminPath: this.adminPath,
+        apiPath: this.apiPath,
+        graphiqlPath: this.graphiqlPath,
+      });
+      const authCompiler = webpack(authWebpackConfig);
+      const authWebpackMiddleware = webpackDevMiddleware(authCompiler, {
+        publicPath: this.adminAuthPath,
+        stats: 'minimal',
+      });
+      app.use(authWebpackMiddleware);
+    }
+
     // handle errors
     // eslint-disable-next-line no-unused-vars
     app.use(function(err, req, res, next) {
diff --git a/packages/admin-ui/server/getWebpackConfig.js b/packages/admin-ui/server/getWebpackConfig.js
index 3021465..cc7f74e 100644
--- a/packages/admin-ui/server/getWebpackConfig.js
+++ b/packages/admin-ui/server/getWebpackConfig.js
@@ -4,7 +4,7 @@ const path = require('path');
 
 const { mode } = require('./env');
 
-module.exports = function({ adminMeta, adminPath, apiPath, graphiqlPath }) {
+module.exports = function({ publicPath, adminMeta, adminPath, apiPath, graphiqlPath }) {
   return {
     mode,
     context: path.resolve(__dirname, '../client/'),
@@ -12,7 +12,10 @@ module.exports = function({ adminMeta, adminPath, apiPath, graphiqlPath }) {
     entry: './index.js',
     output: {
       filename: 'bundle.js',
-      publicPath: adminPath,
+      publicPath,
+    },
+    devServer: {
+      historyApiFallback: true,
     },
     plugins: [
       new webpack.DefinePlugin({
diff --git a/packages/core/Keystone/index.js b/packages/core/Keystone/index.js
index ca635b7..17f6901 100644
--- a/packages/core/Keystone/index.js
+++ b/packages/core/Keystone/index.js
@@ -1,3 +1,4 @@
+const { resolveAllKeys } = require('@keystonejs/utils');
 const inflection = require('inflection');
 const { makeExecutableSchema } = require('graphql-tools');
 const { Mongoose } = require('mongoose');
@@ -170,30 +171,21 @@ module.exports = class Keystone {
     // reference implementation
 
     // Return a promise that resolves to an array of the created items
-    const asyncCreateItems = listKey =>
-      Promise.all(lists[listKey].map(i => this.createItem(listKey, i)));
-
-    // We're going to have to wait for a set of unrelated promises to fullfil
-    // before we can return from this method
-    const promisesToWaitFor = [];
-
-    // We'll reduce the async values to this object over time
-    const createdItems = {};
-
-    Object.keys(lists).forEach(key => {
-      const listItems = asyncCreateItems(key);
-
-      // Add the promise to the global set to wait for
-      promisesToWaitFor.push(listItems);
-
-      // When it resolves, we want to set the values on the result object
-      listItems.then(newItems => {
-        createdItems[key] = newItems;
-      });
-    });
+    const asyncCreateItems = listKey => {
+      if (!this.getListByKey(listKey)) {
+        return Promise.reject(`Cannot create items for unknown list '${listKey}'. Configured lists are: ${Object.keys(this.lists).join(', ')}`);
+      }
+      return Promise.all(lists[listKey].map(i => this.createItem(listKey, i)));
+    }
 
-    // Wait for all promises to complete.
-    // Then resolve to the object containing the resolved arrays of values
-    return Promise.all(promisesToWaitFor).then(() => createdItems);
+    return resolveAllKeys(
+      Object.keys(lists).reduce(
+        (result, listKey) => ({
+          [listKey]: asyncCreateItems(listKey),
+          ...result,
+        }),
+        {}
+      )
+    );
   }
 };
diff --git a/packages/server/WebServer/index.js b/packages/server/WebServer/index.js
index c83eb40..9934695 100644
--- a/packages/server/WebServer/index.js
+++ b/packages/server/WebServer/index.js
@@ -16,9 +16,6 @@ module.exports = class WebServer {
 
     if (adminUI) {
       this.app.use(cors());
-      this.app.use(adminUI.createSessionMiddleware({ cookieSecret }));
-      this.app.use(adminUI.createGraphQLMiddleware());
-      this.app.use(adminUI.createDevMiddleware());
     }
 
     // TODO: think more about how this should be configured and defaulted
@@ -33,15 +30,24 @@ module.exports = class WebServer {
         })
       );
     }
+
   }
   start() {
     const {
       app,
-      config: { port },
+      config: { port, adminUI, cookieSecret, session },
     } = this;
+
+    if (adminUI) {
+      app.use(adminUI.createSessionMiddleware({ cookieSecret }));
+      app.use(adminUI.createGraphQLMiddleware());
+      app.use(adminUI.createDevMiddleware());
+    }
+
     app.get('/', (req, res) =>
       res.sendFile(path.resolve(__dirname, './default.html'))
     );
+
     app.listen(port, () => {
       console.log(`KeystoneJS 5 ready on port ${port}`);
     });
diff --git a/packages/test-project/index.js b/packages/test-project/index.js
index 88dfb0d..6717e9b 100644
--- a/packages/test-project/index.js
+++ b/packages/test-project/index.js
@@ -36,11 +36,6 @@ const keystone = new Keystone({
   name: 'Test Project',
 });
 
-keystone.createAuthStrategy({
-  type: PasswordAuthStrategy,
-  list: 'User',
-});
-
 const fileAdapter = new LocalFileAdapter({
   directory: LOCAL_FILE_PATH,
   route: LOCAL_FILE_ROUTE,
@@ -116,7 +111,15 @@ keystone.createList('PostCategory', {
   },
 });
 
-const admin = new AdminUI(keystone, '/admin');
+const authStrategy = keystone.createAuthStrategy({
+  type: PasswordAuthStrategy,
+  list: 'User',
+});
+
+const admin = new AdminUI(keystone, {
+  adminPath: '/admin',
+  // authStrategy, // uncomment to enable authentication on the Admin UI (NOT the GraphQL API)
+});
 
 const server = new WebServer(keystone, {
   'cookie secret': 'qwerty',
@@ -135,53 +138,6 @@ server.app.use(
   })
 );
 
-server.app.get('/api/session', (req, res) => {
-  const data = {
-    signedIn: !!req.session.keystoneItemId,
-    userId: req.session.keystoneItemId,
-  };
-  if (req.user) {
-    Object.assign(data, {
-      name: req.user.name,
-      twitterId: req.user.twitterId,
-      twitterUsername: req.user.twitterUsername,
-    });
-  }
-  res.json(data);
-});
-
-server.app.get('/api/signin', async (req, res, next) => {
-  try {
-    const result = await keystone.auth.User.password.validate({
-      username: req.query.username,
-      password: req.query.password,
-    });
-    if (!result.success) {
-      return res.json({
-        success: false,
-      });
-    }
-    await keystone.session.create(req, result);
-    res.json({
-      success: true,
-      itemId: result.item.id,
-    });
-  } catch (e) {
-    next(e);
-  }
-});
-
-server.app.get('/api/signout', async (req, res, next) => {
-  try {
-    await keystone.session.destroy(req);
-    res.json({
-      success: true,
-    });
-  } catch (e) {
-    next(e);
-  }
-});
-
 server.app.get('/reset-db', (req, res) => {
   const reset = async () => {
     await keystone.mongoose.connection.dropDatabase();
diff --git a/yarn.lock b/yarn.lock
index 83fdcdc..f62c472 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -1852,7 +1852,7 @@ commander@2.13.0, commander@~2.13.0:
   version "2.13.0"
   resolved "https://registry.yarnpkg.com/commander/-/commander-2.13.0.tgz#6964bca67685df7c1f1430c584f07d7597885b9c"
 
-commander@2.15.1, commander@2.15.x, commander@^2.11.0, commander@~2.15.0:
+commander@2.15.1, commander@2.15.x, commander@^2.11.0, commander@^2.9.0, commander@~2.15.0:
   version "2.15.1"
   resolved "https://registry.yarnpkg.com/commander/-/commander-2.15.1.tgz#df46e867d0fc2aec66a34662b406a9ccafff5b0f"
 
@@ -2108,6 +2108,10 @@ css-what@2.1:
   version "2.1.0"
   resolved "https://registry.yarnpkg.com/css-what/-/css-what-2.1.0.tgz#9467d032c38cfaefb9f2d79501253062f87fa1bd"
 
+cssfilter@0.0.10:
+  version "0.0.10"
+  resolved "https://registry.yarnpkg.com/cssfilter/-/cssfilter-0.0.10.tgz#c6d2672632a2e5c83e013e6864a42ce8defd20ae"
+
 cssom@0.3.x, "cssom@>= 0.3.2 < 0.4.0":
   version "0.3.2"
   resolved "https://registry.yarnpkg.com/cssom/-/cssom-0.3.2.tgz#b8036170c79f07a90ff2f16e22284027a243848b"
@@ -5777,7 +5781,7 @@ qs@6.5.1:
   version "6.5.1"
   resolved "https://registry.yarnpkg.com/qs/-/qs-6.5.1.tgz#349cdf6eef89ec45c12d7d5eb3fc0c870343a6d8"
 
-qs@^6.5.1, qs@~6.5.1:
+qs@^6.5.1, qs@^6.5.2, qs@~6.5.1:
   version "6.5.2"
   resolved "https://registry.yarnpkg.com/qs/-/qs-6.5.2.tgz#cb3ae806e8740444584ef154ce8ee98d403f3e36"
 
@@ -7511,6 +7515,13 @@ xmldom@0.1.x:
   version "0.1.27"
   resolved "https://registry.yarnpkg.com/xmldom/-/xmldom-0.1.27.tgz#d501f97b3bdb403af8ef9ecc20573187aadac0e9"
 
+xss@^1.0.3:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/xss/-/xss-1.0.3.tgz#d04bd2558fd6c29c46113824d5e8b2a910054e23"
+  dependencies:
+    commander "^2.9.0"
+    cssfilter "0.0.10"
+
 xtend@^4.0.0, xtend@~4.0.1:
   version "4.0.1"
   resolved "https://registry.yarnpkg.com/xtend/-/xtend-4.0.1.tgz#a5c6d532be656e23db820efb943a1f04998d63af"
