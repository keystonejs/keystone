// Do not manually modify this file, it is automatically generated by the package at /prisma-utils in this repo.
// Update the script if you need this file to be different

import { schema } from '../../schema';

type StringNullableFilterType = schema.InputObjectType<{
  // can be null
  equals: schema.Arg<typeof schema.String>;
  // can be null
  in: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  // can be null
  notIn: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  lt: schema.Arg<typeof schema.String>;
  lte: schema.Arg<typeof schema.String>;
  gt: schema.Arg<typeof schema.String>;
  gte: schema.Arg<typeof schema.String>;
  contains: schema.Arg<typeof schema.String>;
  startsWith: schema.Arg<typeof schema.String>;
  endsWith: schema.Arg<typeof schema.String>;
  // can be null
  not: schema.Arg<typeof NestedStringNullableFilter>;
}>;

const StringNullableFilter: StringNullableFilterType = schema.inputObject({
  name: 'StringNullableFilter',
  fields: () => ({
    // can be null
    equals: schema.arg({ type: schema.String }),
    // can be null
    in: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    // can be null
    notIn: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    lt: schema.arg({ type: schema.String }),
    lte: schema.arg({ type: schema.String }),
    gt: schema.arg({ type: schema.String }),
    gte: schema.arg({ type: schema.String }),
    contains: schema.arg({ type: schema.String }),
    startsWith: schema.arg({ type: schema.String }),
    endsWith: schema.arg({ type: schema.String }),
    // can be null
    not: schema.arg({ type: NestedStringNullableFilter }),
  }),
});

type NestedStringNullableFilterType = schema.InputObjectType<{
  // can be null
  equals: schema.Arg<typeof schema.String>;
  // can be null
  in: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  // can be null
  notIn: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  lt: schema.Arg<typeof schema.String>;
  lte: schema.Arg<typeof schema.String>;
  gt: schema.Arg<typeof schema.String>;
  gte: schema.Arg<typeof schema.String>;
  contains: schema.Arg<typeof schema.String>;
  startsWith: schema.Arg<typeof schema.String>;
  endsWith: schema.Arg<typeof schema.String>;
  // can be null
  not: schema.Arg<typeof NestedStringNullableFilter>;
}>;

const NestedStringNullableFilter: NestedStringNullableFilterType = schema.inputObject({
  name: 'NestedStringNullableFilter',
  fields: () => ({
    // can be null
    equals: schema.arg({ type: schema.String }),
    // can be null
    in: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    // can be null
    notIn: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    lt: schema.arg({ type: schema.String }),
    lte: schema.arg({ type: schema.String }),
    gt: schema.arg({ type: schema.String }),
    gte: schema.arg({ type: schema.String }),
    contains: schema.arg({ type: schema.String }),
    startsWith: schema.arg({ type: schema.String }),
    endsWith: schema.arg({ type: schema.String }),
    // can be null
    not: schema.arg({ type: NestedStringNullableFilter }),
  }),
});

type StringFilterType = schema.InputObjectType<{
  equals: schema.Arg<typeof schema.String>;
  in: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  notIn: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  lt: schema.Arg<typeof schema.String>;
  lte: schema.Arg<typeof schema.String>;
  gt: schema.Arg<typeof schema.String>;
  gte: schema.Arg<typeof schema.String>;
  contains: schema.Arg<typeof schema.String>;
  startsWith: schema.Arg<typeof schema.String>;
  endsWith: schema.Arg<typeof schema.String>;
  not: schema.Arg<typeof NestedStringFilter>;
}>;

const StringFilter: StringFilterType = schema.inputObject({
  name: 'StringFilter',
  fields: () => ({
    equals: schema.arg({ type: schema.String }),
    in: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    notIn: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    lt: schema.arg({ type: schema.String }),
    lte: schema.arg({ type: schema.String }),
    gt: schema.arg({ type: schema.String }),
    gte: schema.arg({ type: schema.String }),
    contains: schema.arg({ type: schema.String }),
    startsWith: schema.arg({ type: schema.String }),
    endsWith: schema.arg({ type: schema.String }),
    not: schema.arg({ type: NestedStringFilter }),
  }),
});

type NestedStringFilterType = schema.InputObjectType<{
  equals: schema.Arg<typeof schema.String>;
  in: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  notIn: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  lt: schema.Arg<typeof schema.String>;
  lte: schema.Arg<typeof schema.String>;
  gt: schema.Arg<typeof schema.String>;
  gte: schema.Arg<typeof schema.String>;
  contains: schema.Arg<typeof schema.String>;
  startsWith: schema.Arg<typeof schema.String>;
  endsWith: schema.Arg<typeof schema.String>;
  not: schema.Arg<typeof NestedStringFilter>;
}>;

const NestedStringFilter: NestedStringFilterType = schema.inputObject({
  name: 'NestedStringFilter',
  fields: () => ({
    equals: schema.arg({ type: schema.String }),
    in: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    notIn: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    lt: schema.arg({ type: schema.String }),
    lte: schema.arg({ type: schema.String }),
    gt: schema.arg({ type: schema.String }),
    gte: schema.arg({ type: schema.String }),
    contains: schema.arg({ type: schema.String }),
    startsWith: schema.arg({ type: schema.String }),
    endsWith: schema.arg({ type: schema.String }),
    not: schema.arg({ type: NestedStringFilter }),
  }),
});

type BoolNullableFilterType = schema.InputObjectType<{
  // can be null
  equals: schema.Arg<typeof schema.Boolean>;
  // can be null
  not: schema.Arg<typeof BoolNullableFilter>;
}>;

const BoolNullableFilter: BoolNullableFilterType = schema.inputObject({
  name: 'BooleanNullableFilter',
  fields: () => ({
    // can be null
    equals: schema.arg({ type: schema.Boolean }),
    // can be null
    not: schema.arg({ type: BoolNullableFilter }),
  }),
});

type BoolFilterType = schema.InputObjectType<{
  equals: schema.Arg<typeof schema.Boolean>;
  not: schema.Arg<typeof BoolFilter>;
}>;

const BoolFilter: BoolFilterType = schema.inputObject({
  name: 'BooleanFilter',
  fields: () => ({
    equals: schema.arg({ type: schema.Boolean }),
    not: schema.arg({ type: BoolFilter }),
  }),
});

type IntNullableFilterType = schema.InputObjectType<{
  // can be null
  equals: schema.Arg<typeof schema.Int>;
  // can be null
  in: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.Int>>>;
  // can be null
  notIn: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.Int>>>;
  lt: schema.Arg<typeof schema.Int>;
  lte: schema.Arg<typeof schema.Int>;
  gt: schema.Arg<typeof schema.Int>;
  gte: schema.Arg<typeof schema.Int>;
  // can be null
  not: schema.Arg<typeof IntNullableFilter>;
}>;

const IntNullableFilter: IntNullableFilterType = schema.inputObject({
  name: 'IntNullableFilter',
  fields: () => ({
    // can be null
    equals: schema.arg({ type: schema.Int }),
    // can be null
    in: schema.arg({ type: schema.list(schema.nonNull(schema.Int)) }),
    // can be null
    notIn: schema.arg({ type: schema.list(schema.nonNull(schema.Int)) }),
    lt: schema.arg({ type: schema.Int }),
    lte: schema.arg({ type: schema.Int }),
    gt: schema.arg({ type: schema.Int }),
    gte: schema.arg({ type: schema.Int }),
    // can be null
    not: schema.arg({ type: IntNullableFilter }),
  }),
});

type IntFilterType = schema.InputObjectType<{
  equals: schema.Arg<typeof schema.Int>;
  in: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.Int>>>;
  notIn: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.Int>>>;
  lt: schema.Arg<typeof schema.Int>;
  lte: schema.Arg<typeof schema.Int>;
  gt: schema.Arg<typeof schema.Int>;
  gte: schema.Arg<typeof schema.Int>;
  not: schema.Arg<typeof IntFilter>;
}>;

const IntFilter: IntFilterType = schema.inputObject({
  name: 'IntFilter',
  fields: () => ({
    equals: schema.arg({ type: schema.Int }),
    in: schema.arg({ type: schema.list(schema.nonNull(schema.Int)) }),
    notIn: schema.arg({ type: schema.list(schema.nonNull(schema.Int)) }),
    lt: schema.arg({ type: schema.Int }),
    lte: schema.arg({ type: schema.Int }),
    gt: schema.arg({ type: schema.Int }),
    gte: schema.arg({ type: schema.Int }),
    not: schema.arg({ type: IntFilter }),
  }),
});

type FloatNullableFilterType = schema.InputObjectType<{
  // can be null
  equals: schema.Arg<typeof schema.Float>;
  // can be null
  in: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.Float>>>;
  // can be null
  notIn: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.Float>>>;
  lt: schema.Arg<typeof schema.Float>;
  lte: schema.Arg<typeof schema.Float>;
  gt: schema.Arg<typeof schema.Float>;
  gte: schema.Arg<typeof schema.Float>;
  // can be null
  not: schema.Arg<typeof FloatNullableFilter>;
}>;

const FloatNullableFilter: FloatNullableFilterType = schema.inputObject({
  name: 'FloatNullableFilter',
  fields: () => ({
    // can be null
    equals: schema.arg({ type: schema.Float }),
    // can be null
    in: schema.arg({ type: schema.list(schema.nonNull(schema.Float)) }),
    // can be null
    notIn: schema.arg({ type: schema.list(schema.nonNull(schema.Float)) }),
    lt: schema.arg({ type: schema.Float }),
    lte: schema.arg({ type: schema.Float }),
    gt: schema.arg({ type: schema.Float }),
    gte: schema.arg({ type: schema.Float }),
    // can be null
    not: schema.arg({ type: FloatNullableFilter }),
  }),
});

type FloatFilterType = schema.InputObjectType<{
  equals: schema.Arg<typeof schema.Float>;
  in: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.Float>>>;
  notIn: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.Float>>>;
  lt: schema.Arg<typeof schema.Float>;
  lte: schema.Arg<typeof schema.Float>;
  gt: schema.Arg<typeof schema.Float>;
  gte: schema.Arg<typeof schema.Float>;
  not: schema.Arg<typeof FloatFilter>;
}>;

const FloatFilter: FloatFilterType = schema.inputObject({
  name: 'FloatFilter',
  fields: () => ({
    equals: schema.arg({ type: schema.Float }),
    in: schema.arg({ type: schema.list(schema.nonNull(schema.Float)) }),
    notIn: schema.arg({ type: schema.list(schema.nonNull(schema.Float)) }),
    lt: schema.arg({ type: schema.Float }),
    lte: schema.arg({ type: schema.Float }),
    gt: schema.arg({ type: schema.Float }),
    gte: schema.arg({ type: schema.Float }),
    not: schema.arg({ type: FloatFilter }),
  }),
});

type DateTimeNullableFilterType = schema.InputObjectType<{
  // can be null
  equals: schema.Arg<typeof schema.String>;
  // can be null
  in: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  // can be null
  notIn: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  lt: schema.Arg<typeof schema.String>;
  lte: schema.Arg<typeof schema.String>;
  gt: schema.Arg<typeof schema.String>;
  gte: schema.Arg<typeof schema.String>;
  // can be null
  not: schema.Arg<typeof DateTimeNullableFilter>;
}>;

const DateTimeNullableFilter: DateTimeNullableFilterType = schema.inputObject({
  name: 'DateTimeNullableFilter',
  fields: () => ({
    // can be null
    equals: schema.arg({ type: schema.String }),
    // can be null
    in: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    // can be null
    notIn: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    lt: schema.arg({ type: schema.String }),
    lte: schema.arg({ type: schema.String }),
    gt: schema.arg({ type: schema.String }),
    gte: schema.arg({ type: schema.String }),
    // can be null
    not: schema.arg({ type: DateTimeNullableFilter }),
  }),
});

type DateTimeFilterType = schema.InputObjectType<{
  equals: schema.Arg<typeof schema.String>;
  in: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  notIn: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  lt: schema.Arg<typeof schema.String>;
  lte: schema.Arg<typeof schema.String>;
  gt: schema.Arg<typeof schema.String>;
  gte: schema.Arg<typeof schema.String>;
  not: schema.Arg<typeof DateTimeFilter>;
}>;

const DateTimeFilter: DateTimeFilterType = schema.inputObject({
  name: 'DateTimeFilter',
  fields: () => ({
    equals: schema.arg({ type: schema.String }),
    in: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    notIn: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    lt: schema.arg({ type: schema.String }),
    lte: schema.arg({ type: schema.String }),
    gt: schema.arg({ type: schema.String }),
    gte: schema.arg({ type: schema.String }),
    not: schema.arg({ type: DateTimeFilter }),
  }),
});

type DecimalNullableFilterType = schema.InputObjectType<{
  // can be null
  equals: schema.Arg<typeof schema.String>;
  // can be null
  in: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  // can be null
  notIn: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  lt: schema.Arg<typeof schema.String>;
  lte: schema.Arg<typeof schema.String>;
  gt: schema.Arg<typeof schema.String>;
  gte: schema.Arg<typeof schema.String>;
  // can be null
  not: schema.Arg<typeof DecimalNullableFilter>;
}>;

const DecimalNullableFilter: DecimalNullableFilterType = schema.inputObject({
  name: 'DecimalNullableFilter',
  fields: () => ({
    // can be null
    equals: schema.arg({ type: schema.String }),
    // can be null
    in: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    // can be null
    notIn: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    lt: schema.arg({ type: schema.String }),
    lte: schema.arg({ type: schema.String }),
    gt: schema.arg({ type: schema.String }),
    gte: schema.arg({ type: schema.String }),
    // can be null
    not: schema.arg({ type: DecimalNullableFilter }),
  }),
});

type DecimalFilterType = schema.InputObjectType<{
  equals: schema.Arg<typeof schema.String>;
  in: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  notIn: schema.Arg<schema.ListType<schema.NonNullType<typeof schema.String>>>;
  lt: schema.Arg<typeof schema.String>;
  lte: schema.Arg<typeof schema.String>;
  gt: schema.Arg<typeof schema.String>;
  gte: schema.Arg<typeof schema.String>;
  not: schema.Arg<typeof DecimalFilter>;
}>;

const DecimalFilter: DecimalFilterType = schema.inputObject({
  name: 'DecimalFilter',
  fields: () => ({
    equals: schema.arg({ type: schema.String }),
    in: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    notIn: schema.arg({ type: schema.list(schema.nonNull(schema.String)) }),
    lt: schema.arg({ type: schema.String }),
    lte: schema.arg({ type: schema.String }),
    gt: schema.arg({ type: schema.String }),
    gte: schema.arg({ type: schema.String }),
    not: schema.arg({ type: DecimalFilter }),
  }),
});

export const String = {
  optional: StringNullableFilter,
  required: StringFilter,
};

export const Boolean = {
  optional: BoolNullableFilter,
  required: BoolFilter,
};

export const Int = {
  optional: IntNullableFilter,
  required: IntFilter,
};

export const Float = {
  optional: FloatNullableFilter,
  required: FloatFilter,
};

export const DateTime = {
  optional: DateTimeNullableFilter,
  required: DateTimeFilter,
};

export const Decimal = {
  optional: DecimalNullableFilter,
  required: DecimalFilter,
};

export { enumFilters as enum } from '../enum-filter';
