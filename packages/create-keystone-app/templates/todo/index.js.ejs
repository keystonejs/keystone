const { Keystone } = require('@keystone-alpha/keystone');
const { MongooseAdapter } = require('@keystone-alpha/adapter-mongoose');
const { Text } = require('@keystone-alpha/fields');
const AdminUI = require('@keystone-alpha/app-admin');
const StaticApp = require('@keystone-alpha/app-static');

// The core `keystone` instance is always required.
// Here you can setup the database adapter, set the name used throughout the
// application (Admin UI, database name, etc), and other core config options.
const keystone = new Keystone({
  name: '<%= name%>',
  adapter: new MongooseAdapter(),
});

// Our first list!
// Keystone refers to collections of data as "Lists" of items, and individual
// bits of data per item as "fields".
// Here, naming the list 'Todo' will influence the name of the list in the Admin
// UI, as well as the queries and mutations available via GraphQL.
keystone.createList('Todo', {
  schemaDoc: 'A list of things which need to be done',
  fields: {
    // This list is setup with a single field, 'name'.
    // The type of Text influences the types and queries available via GraphQL.
    // See the Text field docs:
    // https://v5.keystonejs.com/keystone-alpha/fields/types/text/
    name: { type: Text, schemaDoc: 'This is the thing you need to do' },
  },
});

// Setup the optional Admin UI which will generate the Admin UI based on the
// lists and fields you've setup.
// If no admin is created, you will still have a fully functioning GraphQL API.
const admin = new AdminUI(keystone);

module.exports = {
  // You must export your 'keystone' instance which will be used to setup
  // a database, and associated GraphQL APIs.
  keystone,

  // A running instance of KeystoneJS is comprised of a series of server
  // middlewares.
  // Using the `apps` export, we can inject our own middlewares into the
  // default express app.
  apps: [
    // Serve our website from the root route.
    new StaticApp({ route: '/', path: 'public' }),

    // Optionally export the 'admin' instance.
    // If no admin is exported, you will still have a fully functioning GraphQL
    // API.
    admin,
  ],
};
