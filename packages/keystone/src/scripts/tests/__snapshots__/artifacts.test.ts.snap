// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`postinstall writes the correct node_modules files 1`] = `
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ node_modules/.keystone/types.d.ts ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
type Scalars = {
  readonly ID: string;
  readonly Boolean: boolean;
  readonly String: string;
  readonly Int: number;
  readonly Float: number;
  readonly JSON: import("@keystone-next/keystone/types").JSONValue;
  readonly Decimal: import("@keystone-next/keystone/types").Decimal | string;
};

export type TodoWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type TodoWhereInput = {
  readonly AND?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null;
  readonly OR?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null;
  readonly NOT?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null;
  readonly id?: IDFilter | null;
  readonly title?: StringFilter | null;
};

export type IDFilter = {
  readonly equals?: Scalars["ID"] | null;
  readonly in?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly notIn?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly lt?: Scalars["ID"] | null;
  readonly lte?: Scalars["ID"] | null;
  readonly gt?: Scalars["ID"] | null;
  readonly gte?: Scalars["ID"] | null;
  readonly not?: IDFilter | null;
};

export type StringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringFilter | null;
};

export type NestedStringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringFilter | null;
};

export type TodoOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly title?: OrderDirection | null;
};

export type OrderDirection =
  | "asc"
  | "desc";

export type TodoUpdateInput = {
  readonly title?: Scalars["String"] | null;
};

export type TodoUpdateArgs = {
  readonly where: TodoWhereUniqueInput;
  readonly data: TodoUpdateInput;
};

export type TodoCreateInput = {
  readonly title?: Scalars["String"] | null;
};

export type KeystoneAdminUIFieldMetaCreateViewFieldMode =
  | "edit"
  | "hidden";

export type KeystoneAdminUIFieldMetaListViewFieldMode =
  | "read"
  | "hidden";

export type KeystoneAdminUIFieldMetaItemViewFieldMode =
  | "edit"
  | "read"
  | "hidden";

export type QueryMode =
  | "default"
  | "insensitive";

export type KeystoneAdminUISortDirection =
  | "ASC"
  | "DESC";


export type TodoListTypeInfo = {
  key: "Todo";
  fields: "id"|"title"
  backing: import(".prisma/client").Todo;
  inputs: {
    where: TodoWhereInput;
    uniqueWhere: TodoWhereUniqueInput;
    create: TodoCreateInput;
    update: TodoUpdateInput;
  };
  args: {
    listQuery: {
  readonly where?: TodoWhereInput;
  readonly orderBy?: ReadonlyArray<TodoOrderByInput> | TodoOrderByInput;
  readonly take?: Scalars["Int"] | null;
  readonly skip?: Scalars["Int"];
}
  };
  all: KeystoneTypeInfo;
};

export type KeystoneListsTypeInfo = {
  readonly Todo: TodoListTypeInfo;
};
export declare namespace Lists {
  export type Todo = import('@keystone-next/keystone').ListConfig<TodoListTypeInfo, any>;
}
export type KeystoneListsAPI = import('@keystone-next/keystone/types').KeystoneListsAPI<KeystoneListsTypeInfo>;
export type KeystoneDbAPI = import('@keystone-next/keystone/types').KeystoneDbAPI<KeystoneListsTypeInfo>;
export type KeystoneContext = import('@keystone-next/keystone/types').KeystoneContextFromKSTypes<KeystoneTypeInfo>;

export type KeystoneTypeInfo = {
  lists: KeystoneListsTypeInfo;
  prisma: import('.prisma/client').PrismaClient;
};

export type Lists = {
  [Key in keyof KeystoneListsTypeInfo]?: import('@keystone-next/keystone').ListConfig<KeystoneListsTypeInfo[Key], any>
} & Record<string, import('@keystone-next/keystone').ListConfig<any, any>>;

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ node_modules/.keystone/types.js ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

`;
