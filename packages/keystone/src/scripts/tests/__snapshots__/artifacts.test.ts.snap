// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`postinstall writes the correct node_modules files 1`] = `
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ node_modules/.keystone/types.d.ts ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
export type Scalars = {
  readonly [key: string]: unknown;
  readonly ID: string;
  readonly Boolean: boolean;
  readonly String: string;
  readonly Int: number;
  readonly Float: number;
  readonly JSON: import("@keystone-6/core/types").JSONValue;
  readonly Decimal: import("@keystone-6/core/types").Decimal | string;
  readonly DateTime: Date | string;
};

export type TodoWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type TodoWhereInput = {
  readonly AND?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null;
  readonly OR?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null;
  readonly NOT?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null;
  readonly id?: IDFilter | null;
  readonly title?: StringFilter | null;
};

export type IDFilter = {
  readonly equals?: Scalars["ID"] | null;
  readonly in?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly notIn?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly lt?: Scalars["ID"] | null;
  readonly lte?: Scalars["ID"] | null;
  readonly gt?: Scalars["ID"] | null;
  readonly gte?: Scalars["ID"] | null;
  readonly not?: IDFilter | null;
};

export type StringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringFilter | null;
};

export type NestedStringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringFilter | null;
};

export type TodoOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly title?: OrderDirection | null;
};

export type OrderDirection =
  | "asc"
  | "desc";

export type TodoUpdateInput = {
  readonly title?: Scalars["String"] | null;
};

export type TodoUpdateArgs = {
  readonly where: TodoWhereUniqueInput;
  readonly data: TodoUpdateInput;
};

export type TodoCreateInput = {
  readonly title?: Scalars["String"] | null;
};

export type KeystoneAdminUIFieldMetaCreateViewFieldMode =
  | "edit"
  | "hidden";

export type KeystoneAdminUIFieldMetaListViewFieldMode =
  | "read"
  | "hidden";

export type KeystoneAdminUIFieldMetaItemViewFieldMode =
  | "edit"
  | "read"
  | "hidden";

export type QueryMode =
  | "default"
  | "insensitive";

export type KeystoneAdminUISortDirection =
  | "ASC"
  | "DESC";

export declare namespace OutputTypes {
  export type Scalars = {
    readonly [key: string]: unknown;
    readonly ID: string;
    readonly Boolean: boolean;
    readonly String: string;
    readonly Int: number;
    readonly Float: number;
    readonly JSON: import("@keystone-6/core/types").JSONValue;
    readonly Decimal: string;
    readonly DateTime: string;
  };

  export type Todo = {
    readonly __typename?: "Todo";
    readonly id?: Scalars["ID"];
    readonly title?: Scalars["String"] | null;
  };

  export type OrderDirection =
    | "asc"
    | "desc";

  export type Mutation = {
    readonly __typename?: "Mutation";
    readonly createTodo?: Todo | null;
    readonly createTodos?: ReadonlyArray<Todo | null> | null;
    readonly updateTodo?: Todo | null;
    readonly updateTodos?: ReadonlyArray<Todo | null> | null;
    readonly deleteTodo?: Todo | null;
    readonly deleteTodos?: ReadonlyArray<Todo | null> | null;
  };

  export type Query = {
    readonly __typename?: "Query";
    readonly todos?: ReadonlyArray<Todo> | null;
    readonly todo?: Todo | null;
    readonly todosCount?: Scalars["Int"] | null;
    readonly keystone?: KeystoneMeta;
  };

  export type KeystoneMeta = {
    readonly __typename?: "KeystoneMeta";
    readonly adminMeta?: KeystoneAdminMeta;
  };

  export type KeystoneAdminMeta = {
    readonly __typename?: "KeystoneAdminMeta";
    readonly enableSignout?: Scalars["Boolean"];
    readonly enableSessionItem?: Scalars["Boolean"];
    readonly lists?: ReadonlyArray<KeystoneAdminUIListMeta>;
    readonly list?: KeystoneAdminUIListMeta | null;
  };

  export type KeystoneAdminUIListMeta = {
    readonly __typename?: "KeystoneAdminUIListMeta";
    readonly key?: Scalars["String"];
    readonly itemQueryName?: Scalars["String"];
    readonly listQueryName?: Scalars["String"];
    readonly hideCreate?: Scalars["Boolean"];
    readonly hideDelete?: Scalars["Boolean"];
    readonly path?: Scalars["String"];
    readonly label?: Scalars["String"];
    readonly singular?: Scalars["String"];
    readonly plural?: Scalars["String"];
    readonly description?: Scalars["String"] | null;
    readonly initialColumns?: ReadonlyArray<Scalars["String"]>;
    readonly pageSize?: Scalars["Int"];
    readonly labelField?: Scalars["String"];
    readonly fields?: ReadonlyArray<KeystoneAdminUIFieldMeta>;
    readonly initialSort?: KeystoneAdminUISort | null;
    readonly isHidden?: Scalars["Boolean"];
  };

  export type KeystoneAdminUIFieldMeta = {
    readonly __typename?: "KeystoneAdminUIFieldMeta";
    readonly path?: Scalars["String"];
    readonly label?: Scalars["String"];
    readonly isOrderable?: Scalars["Boolean"];
    readonly isFilterable?: Scalars["Boolean"];
    readonly fieldMeta?: Scalars["JSON"] | null;
    readonly viewsIndex?: Scalars["Int"];
    readonly customViewsIndex?: Scalars["Int"] | null;
    readonly createView?: KeystoneAdminUIFieldMetaCreateView;
    readonly listView?: KeystoneAdminUIFieldMetaListView;
    readonly itemView?: KeystoneAdminUIFieldMetaItemView | null;
    readonly search?: QueryMode | null;
  };

  export type KeystoneAdminUIFieldMetaCreateView = {
    readonly __typename?: "KeystoneAdminUIFieldMetaCreateView";
    readonly fieldMode?: KeystoneAdminUIFieldMetaCreateViewFieldMode;
  };

  export type KeystoneAdminUIFieldMetaCreateViewFieldMode =
    | "edit"
    | "hidden";

  export type KeystoneAdminUIFieldMetaListView = {
    readonly __typename?: "KeystoneAdminUIFieldMetaListView";
    readonly fieldMode?: KeystoneAdminUIFieldMetaListViewFieldMode;
  };

  export type KeystoneAdminUIFieldMetaListViewFieldMode =
    | "read"
    | "hidden";

  export type KeystoneAdminUIFieldMetaItemView = {
    readonly __typename?: "KeystoneAdminUIFieldMetaItemView";
    readonly fieldMode?: KeystoneAdminUIFieldMetaItemViewFieldMode | null;
  };

  export type KeystoneAdminUIFieldMetaItemViewFieldMode =
    | "edit"
    | "read"
    | "hidden";

  export type QueryMode =
    | "default"
    | "insensitive";

  export type KeystoneAdminUISort = {
    readonly __typename?: "KeystoneAdminUISort";
    readonly field?: Scalars["String"];
    readonly direction?: KeystoneAdminUISortDirection;
  };

  export type KeystoneAdminUISortDirection =
    | "ASC"
    | "DESC";
}
export declare namespace Lists {
  export type Todo = import('@keystone-6/core').ListConfig<Lists.Todo.TypeInfo, any>;
  namespace Todo {
    export type Item = import('.prisma/client').Todo;
    export type TypeInfo = {
      key: "Todo";
      fields: "id" | "title"
      item: Item;
      outputs: {
        item: OutputTypes.Todo;
      };
      inputs: {
        where: TodoWhereInput;
        uniqueWhere: TodoWhereUniqueInput;
        create: TodoCreateInput;
        update: TodoUpdateInput;
        orderBy: TodoOrderByInput;
      };
      all: __TypeInfo;
    };
  }
}
export type Context = import('@keystone-6/core/types').KeystoneContext<TypeInfo>;

export type TypeInfo = {
  lists: {
  readonly Todo: Lists.Todo.TypeInfo;
  };
  prisma: import('.prisma/client').PrismaClient;
};

type __TypeInfo = TypeInfo;

export type Lists = {
  [Key in keyof TypeInfo['lists']]?: import('@keystone-6/core').ListConfig<TypeInfo['lists'][Key], any>
} & Record<string, import('@keystone-6/core').ListConfig<any, any>>;

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ node_modules/.keystone/types.js ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

`;
