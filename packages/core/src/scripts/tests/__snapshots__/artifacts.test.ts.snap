// Jest Snapshot v1, https://goo.gl/fbAQLP
exports[`postinstall writes the correct node_modules files 1`] = `
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ node_modules/.keystone/types.ts ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
/* eslint-disable */

type Scalars = {
  readonly ID: string;
  readonly Boolean: boolean;
  readonly String: string;
  readonly Int: number;
  readonly Float: number;
  readonly JSON: import('@keystone-6/core/types').JSONValue;
  readonly Decimal: import('@keystone-6/core/types').Decimal | string;
};

export type TodoWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null;
};

export type TodoWhereInput = {
  readonly AND?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null;
  readonly OR?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null;
  readonly NOT?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null;
  readonly id?: IDFilter | null;
  readonly title?: StringFilter | null;
};

export type IDFilter = {
  readonly equals?: Scalars['ID'] | null;
  readonly in?: ReadonlyArray<Scalars['ID']> | Scalars['ID'] | null;
  readonly notIn?: ReadonlyArray<Scalars['ID']> | Scalars['ID'] | null;
  readonly lt?: Scalars['ID'] | null;
  readonly lte?: Scalars['ID'] | null;
  readonly gt?: Scalars['ID'] | null;
  readonly gte?: Scalars['ID'] | null;
  readonly not?: IDFilter | null;
};

export type StringFilter = {
  readonly equals?: Scalars['String'] | null;
  readonly in?: ReadonlyArray<Scalars['String']> | Scalars['String'] | null;
  readonly notIn?: ReadonlyArray<Scalars['String']> | Scalars['String'] | null;
  readonly lt?: Scalars['String'] | null;
  readonly lte?: Scalars['String'] | null;
  readonly gt?: Scalars['String'] | null;
  readonly gte?: Scalars['String'] | null;
  readonly contains?: Scalars['String'] | null;
  readonly startsWith?: Scalars['String'] | null;
  readonly endsWith?: Scalars['String'] | null;
  readonly not?: NestedStringFilter | null;
};

export type NestedStringFilter = {
  readonly equals?: Scalars['String'] | null;
  readonly in?: ReadonlyArray<Scalars['String']> | Scalars['String'] | null;
  readonly notIn?: ReadonlyArray<Scalars['String']> | Scalars['String'] | null;
  readonly lt?: Scalars['String'] | null;
  readonly lte?: Scalars['String'] | null;
  readonly gt?: Scalars['String'] | null;
  readonly gte?: Scalars['String'] | null;
  readonly contains?: Scalars['String'] | null;
  readonly startsWith?: Scalars['String'] | null;
  readonly endsWith?: Scalars['String'] | null;
  readonly not?: NestedStringFilter | null;
};

export type TodoOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly title?: OrderDirection | null;
};

export type OrderDirection =
  | 'asc'
  | 'desc';

export type TodoUpdateInput = {
  readonly title?: Scalars['String'] | null;
};

export type TodoUpdateArgs = {
  readonly where: TodoWhereUniqueInput;
  readonly data: TodoUpdateInput;
};

export type TodoCreateInput = {
  readonly title?: Scalars['String'] | null;
};

export type KeystoneAdminUIFieldMetaIsNonNull =
  | 'read'
  | 'create'
  | 'update';

export type KeystoneAdminUIFieldMetaCreateViewFieldMode =
  | 'edit'
  | 'hidden';

export type KeystoneAdminUIFieldMetaListViewFieldMode =
  | 'read'
  | 'hidden';

export type KeystoneAdminUIFieldMetaItemViewFieldMode =
  | 'edit'
  | 'read'
  | 'hidden';

export type KeystoneAdminUIFieldMetaItemViewFieldPosition =
  | 'form'
  | 'sidebar';

export type QueryMode =
  | 'default'
  | 'insensitive';

export type KeystoneAdminUISortDirection =
  | 'ASC'
  | 'DESC';

type ResolvedTodoCreateInput = {
  id?: undefined;
  title?: import('@prisma/client').Prisma.TodoCreateInput['title'];
};

type ResolvedTodoUpdateInput = {
  id?: undefined;
  title?: import('@prisma/client').Prisma.TodoUpdateInput['title'];
};

export declare namespace Lists {
  export type Todo = import('@keystone-6/core').ListConfig<Lists.Todo.TypeInfo, any>;
  namespace Todo {
    export type Item = import('@prisma/client').Todo;
    export type TypeInfo = {
      key: 'Todo';
      isSingleton: false;
      fields: 'id' | 'title'
      item: Item;
      inputs: {
        where: TodoWhereInput;
        uniqueWhere: TodoWhereUniqueInput;
        create: TodoCreateInput;
        update: TodoUpdateInput;
        orderBy: TodoOrderByInput;
      };
      prisma: {
        create: ResolvedTodoCreateInput;
        update: ResolvedTodoUpdateInput;
      };
      all: __TypeInfo;
    };
  }
}
export type Context = import('@keystone-6/core/types').KeystoneContext<TypeInfo>;

export type TypeInfo = {
  lists: {
    readonly Todo: Lists.Todo.TypeInfo;
  };
  prisma: import('@prisma/client').PrismaClient;
};

type __TypeInfo = TypeInfo;

export type Lists = {
  [Key in keyof TypeInfo['lists']]?: import('@keystone-6/core').ListConfig<TypeInfo['lists'][Key], any>
} & Record<string, import('@keystone-6/core').ListConfig<any, any>>;

export {}

`;
