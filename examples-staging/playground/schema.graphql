type Note {
  id: ID!
  label: String
}

input NoteWhereInput {
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  label: String
  label_not: String
  label_contains: String
  label_not_contains: String
  label_in: [String]
  label_not_in: [String]
}

input NoteWhereUniqueInput {
  id: ID
}

enum SortNotesBy {
  id_ASC
  id_DESC
  label_ASC
  label_DESC
}

input NoteOrderByInput {
  id: OrderDirection
  label: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input NoteUpdateInput {
  label: String
}

input NotesUpdateInput {
  id: ID!
  data: NoteUpdateInput
}

input NoteCreateInput {
  label: String
}

input NotesCreateInput {
  data: NoteCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type _QueryMeta {
  count: Int
}

type Mutation {
  createNote(data: NoteCreateInput): Note
  createNotes(data: [NotesCreateInput]): [Note]
  updateNote(id: ID!, data: NoteUpdateInput): Note
  updateNotes(data: [NotesUpdateInput]): [Note]
  deleteNote(id: ID!): Note
  deleteNotes(ids: [ID!]): [Note]
}

type Query {
  allNotes(
    where: NoteWhereInput! = {}
    search: String
    sortBy: [SortNotesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [NoteOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Note!]
  Note(where: NoteWhereUniqueInput!): Note
  _allNotesMeta(
    where: NoteWhereInput! = {}
    search: String
    sortBy: [SortNotesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [NoteOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use notesCount instead."
    )
  notesCount(where: NoteWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
