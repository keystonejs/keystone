type Todo {
  id: ID!
  label: String
  isComplete: Boolean
  isPrivate: Boolean
  assignedTo: Person
}

input TodoWhereInput {
  AND: [TodoWhereInput!]
  OR: [TodoWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  label: String
  label_not: String
  label_contains: String
  label_not_contains: String
  label_in: [String]
  label_not_in: [String]
  isComplete: Boolean
  isComplete_not: Boolean
  isPrivate: Boolean
  isPrivate_not: Boolean
  assignedTo: PersonWhereInput
  assignedTo_is_null: Boolean
}

input TodoWhereUniqueInput {
  id: ID
}

enum SortTodosBy {
  id_ASC
  id_DESC
  label_ASC
  label_DESC
  isComplete_ASC
  isComplete_DESC
  isPrivate_ASC
  isPrivate_DESC
}

input TodoOrderByInput {
  id: OrderDirection
  label: OrderDirection
  isComplete: OrderDirection
  isPrivate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input TodoUpdateInput {
  label: String
  isComplete: Boolean
  isPrivate: Boolean
  assignedTo: PersonRelateToOneInput
}

input PersonRelateToOneInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
  disconnect: PersonWhereUniqueInput
  disconnectAll: Boolean
}

input TodosUpdateInput {
  id: ID!
  data: TodoUpdateInput
}

input TodoCreateInput {
  label: String
  isComplete: Boolean
  isPrivate: Boolean
  assignedTo: PersonRelateToOneInput
}

input TodosCreateInput {
  data: TodoCreateInput
}

type Person {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: Role
  tasks(
    where: TodoWhereInput! = {}
    search: String
    sortBy: [SortTodosBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TodoOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Todo!]
  _tasksMeta(
    where: TodoWhereInput! = {}
    search: String
    sortBy: [SortTodosBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TodoOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use tasksCount instead."
    )
  tasksCount(where: TodoWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

type _QueryMeta {
  count: Int
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  role: RoleWhereInput
  role_is_null: Boolean
  tasks_every: TodoWhereInput
  tasks_some: TodoWhereInput
  tasks_none: TodoWhereInput
}

input PersonWhereUniqueInput {
  id: ID
}

enum SortPeopleBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input PersonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input PersonUpdateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneInput
  tasks: TodoRelateToManyInput
}

input RoleRelateToOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: RoleWhereUniqueInput
  disconnectAll: Boolean
}

input TodoRelateToManyInput {
  create: [TodoCreateInput]
  connect: [TodoWhereUniqueInput]
  disconnect: [TodoWhereUniqueInput]
  disconnectAll: Boolean
}

input PeopleUpdateInput {
  id: ID!
  data: PersonUpdateInput
}

input PersonCreateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneInput
  tasks: TodoRelateToManyInput
}

input PeopleCreateInput {
  data: PersonCreateInput
}

type Role {
  id: ID!
  name: String
  canCreateTodos: Boolean
  canManageAllTodos: Boolean
  canSeeOtherPeople: Boolean
  canEditOtherPeople: Boolean
  canManagePeople: Boolean
  canManageRoles: Boolean
  assignedTo(
    where: PersonWhereInput! = {}
    search: String
    sortBy: [SortPeopleBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PersonOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Person!]
  _assignedToMeta(
    where: PersonWhereInput! = {}
    search: String
    sortBy: [SortPeopleBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PersonOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use assignedToCount instead."
    )
  assignedToCount(where: PersonWhereInput! = {}): Int
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_in: [String]
  name_not_in: [String]
  canCreateTodos: Boolean
  canCreateTodos_not: Boolean
  canManageAllTodos: Boolean
  canManageAllTodos_not: Boolean
  canSeeOtherPeople: Boolean
  canSeeOtherPeople_not: Boolean
  canEditOtherPeople: Boolean
  canEditOtherPeople_not: Boolean
  canManagePeople: Boolean
  canManagePeople_not: Boolean
  canManageRoles: Boolean
  canManageRoles_not: Boolean
  assignedTo_every: PersonWhereInput
  assignedTo_some: PersonWhereInput
  assignedTo_none: PersonWhereInput
}

input RoleWhereUniqueInput {
  id: ID
}

enum SortRolesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  canCreateTodos_ASC
  canCreateTodos_DESC
  canManageAllTodos_ASC
  canManageAllTodos_DESC
  canSeeOtherPeople_ASC
  canSeeOtherPeople_DESC
  canEditOtherPeople_ASC
  canEditOtherPeople_DESC
  canManagePeople_ASC
  canManagePeople_DESC
  canManageRoles_ASC
  canManageRoles_DESC
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canCreateTodos: OrderDirection
  canManageAllTodos: OrderDirection
  canSeeOtherPeople: OrderDirection
  canEditOtherPeople: OrderDirection
  canManagePeople: OrderDirection
  canManageRoles: OrderDirection
}

input RoleUpdateInput {
  name: String
  canCreateTodos: Boolean
  canManageAllTodos: Boolean
  canSeeOtherPeople: Boolean
  canEditOtherPeople: Boolean
  canManagePeople: Boolean
  canManageRoles: Boolean
  assignedTo: PersonRelateToManyInput
}

input PersonRelateToManyInput {
  create: [PersonCreateInput]
  connect: [PersonWhereUniqueInput]
  disconnect: [PersonWhereUniqueInput]
  disconnectAll: Boolean
}

input RolesUpdateInput {
  id: ID!
  data: RoleUpdateInput
}

input RoleCreateInput {
  name: String
  canCreateTodos: Boolean
  canManageAllTodos: Boolean
  canSeeOtherPeople: Boolean
  canEditOtherPeople: Boolean
  canManagePeople: Boolean
  canManageRoles: Boolean
  assignedTo: PersonRelateToManyInput
}

input RolesCreateInput {
  data: RoleCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createTodo(data: TodoCreateInput): Todo
  createTodos(data: [TodosCreateInput]): [Todo]
  updateTodo(id: ID!, data: TodoUpdateInput): Todo
  updateTodos(data: [TodosUpdateInput]): [Todo]
  deleteTodo(id: ID!): Todo
  deleteTodos(ids: [ID!]): [Todo]
  createPerson(data: PersonCreateInput): Person
  createPeople(data: [PeopleCreateInput]): [Person]
  updatePerson(id: ID!, data: PersonUpdateInput): Person
  updatePeople(data: [PeopleUpdateInput]): [Person]
  deletePerson(id: ID!): Person
  deletePeople(ids: [ID!]): [Person]
  createRole(data: RoleCreateInput): Role
  createRoles(data: [RolesCreateInput]): [Role]
  updateRole(id: ID!, data: RoleUpdateInput): Role
  updateRoles(data: [RolesUpdateInput]): [Role]
  deleteRole(id: ID!): Role
  deleteRoles(ids: [ID!]): [Role]
  authenticatePersonWithPassword(
    email: String!
    password: String!
  ): PersonAuthenticationWithPasswordResult!
  createInitialPerson(
    data: CreateInitialPersonInput!
  ): PersonAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = Person

union PersonAuthenticationWithPasswordResult =
    PersonAuthenticationWithPasswordSuccess
  | PersonAuthenticationWithPasswordFailure

type PersonAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Person!
}

type PersonAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialPersonInput {
  name: String
  email: String
  password: String
}

type Query {
  allTodos(
    where: TodoWhereInput! = {}
    search: String
    sortBy: [SortTodosBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TodoOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Todo!]
  Todo(where: TodoWhereUniqueInput!): Todo
  _allTodosMeta(
    where: TodoWhereInput! = {}
    search: String
    sortBy: [SortTodosBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TodoOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use todosCount instead."
    )
  todosCount(where: TodoWhereInput! = {}): Int
  allPeople(
    where: PersonWhereInput! = {}
    search: String
    sortBy: [SortPeopleBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PersonOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Person!]
  Person(where: PersonWhereUniqueInput!): Person
  _allPeopleMeta(
    where: PersonWhereInput! = {}
    search: String
    sortBy: [SortPeopleBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PersonOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use peopleCount instead."
    )
  peopleCount(where: PersonWhereInput! = {}): Int
  allRoles(
    where: RoleWhereInput! = {}
    search: String
    sortBy: [SortRolesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoleOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Role!]
  Role(where: RoleWhereUniqueInput!): Role
  _allRolesMeta(
    where: RoleWhereInput! = {}
    search: String
    sortBy: [SortRolesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoleOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use rolesCount instead."
    )
  rolesCount(where: RoleWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
