# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Todo {
  id: ID!
  label: String
  isComplete: Boolean
  assignedTo: User
  finishBy: String
  createdAt: String
  updatedAt: String
}

input TodoWhereUniqueInput {
  id: ID
}

input TodoWhereInput {
  AND: [TodoWhereInput!]
  OR: [TodoWhereInput!]
  NOT: [TodoWhereInput!]
  id: IDFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input TodoOrderByInput {
  id: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input TodoUpdateInput {
  label: String
  isComplete: Boolean
  assignedTo: UserRelateToOneForUpdateInput
  finishBy: String
  createdAt: String
  updatedAt: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TodoUpdateArgs {
  where: TodoWhereUniqueInput!
  data: TodoUpdateInput!
}

input TodoCreateInput {
  label: String
  isComplete: Boolean
  assignedTo: UserRelateToOneForCreateInput
  finishBy: String
  createdAt: String
  updatedAt: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  tasks(
    where: TodoWhereInput! = {}
    orderBy: [TodoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Todo!]
  tasksCount(where: TodoWhereInput! = {}): Int
  createdAt: String
  updatedAt: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
}

input UserOrderByInput {
  id: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  tasks: TodoRelateToManyForUpdateInput
  createdAt: String
  updatedAt: String
}

input TodoRelateToManyForUpdateInput {
  disconnect: [TodoWhereUniqueInput!]
  set: [TodoWhereUniqueInput!]
  create: [TodoCreateInput!]
  connect: [TodoWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  tasks: TodoRelateToManyForCreateInput
  createdAt: String
  updatedAt: String
}

input TodoRelateToManyForCreateInput {
  create: [TodoCreateInput!]
  connect: [TodoWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createTodo(data: TodoCreateInput!): Todo
  createTodos(data: [TodoCreateInput!]!): [Todo]
  updateTodo(where: TodoWhereUniqueInput!, data: TodoUpdateInput!): Todo
  updateTodos(data: [TodoUpdateArgs!]!): [Todo]
  deleteTodo(where: TodoWhereUniqueInput!): Todo
  deleteTodos(where: [TodoWhereUniqueInput!]!): [Todo]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
}

type Query {
  todos(
    where: TodoWhereInput! = {}
    orderBy: [TodoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Todo!]
  todo(where: TodoWhereUniqueInput!): Todo
  todosCount(where: TodoWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
