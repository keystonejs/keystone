# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Task {
  id: ID!
  label: String
  assignedTo: Person
  finishBy: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input TaskWhereUniqueInput {
  id: ID
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  id: IDFilter
  label: StringFilter
  assignedTo: PersonWhereInput
  finishBy: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TaskOrderByInput {
  id: OrderDirection
  label: OrderDirection
  finishBy: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input TaskUpdateInput {
  label: String
  assignedTo: PersonRelateToOneForUpdateInput
  finishBy: DateTime
}

input PersonRelateToOneForUpdateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
}

input TaskUpdateArgs {
  where: TaskWhereUniqueInput!
  data: TaskUpdateInput!
}

input TaskCreateInput {
  label: String
  assignedTo: PersonRelateToOneForCreateInput
  finishBy: DateTime
}

input PersonRelateToOneForCreateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}

type Person {
  id: ID!
  name: String
  tasks(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TaskWhereUniqueInput): [Task!]
  tasksCount(where: TaskWhereInput! = {}): Int
}

input PersonWhereUniqueInput {
  id: ID
  name: String
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  name: StringFilter
  tasks: TaskManyRelationFilter
}

input TaskManyRelationFilter {
  every: TaskWhereInput
  some: TaskWhereInput
  none: TaskWhereInput
}

input PersonOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PersonUpdateInput {
  name: String
  tasks: TaskRelateToManyForUpdateInput
}

input TaskRelateToManyForUpdateInput {
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  name: String
  tasks: TaskRelateToManyForCreateInput
}

input TaskRelateToManyForCreateInput {
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

type Order {
  id: ID!
  description: String
  assignedTo: Person
  options(where: OptionWhereInput! = {}, orderBy: [OptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OptionWhereUniqueInput): [Option!]
  optionsCount(where: OptionWhereInput! = {}): Int
  orderedAt: DateTime
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  description: StringFilter
  assignedTo: PersonWhereInput
  options: OptionManyRelationFilter
  orderedAt: DateTimeNullableFilter
}

input OptionManyRelationFilter {
  every: OptionWhereInput
  some: OptionWhereInput
  none: OptionWhereInput
}

input OrderOrderByInput {
  id: OrderDirection
  description: OrderDirection
  orderedAt: OrderDirection
}

input OrderUpdateInput {
  description: String
  assignedTo: PersonRelateToOneForUpdateInput
  options: OptionRelateToManyForUpdateInput
  orderedAt: DateTime
}

input OptionRelateToManyForUpdateInput {
  disconnect: [OptionWhereUniqueInput!]
  set: [OptionWhereUniqueInput!]
  create: [OptionCreateInput!]
  connect: [OptionWhereUniqueInput!]
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  description: String
  assignedTo: PersonRelateToOneForCreateInput
  options: OptionRelateToManyForCreateInput
  orderedAt: DateTime
}

input OptionRelateToManyForCreateInput {
  create: [OptionCreateInput!]
  connect: [OptionWhereUniqueInput!]
}

type Option {
  id: ID!
  description: String
}

input OptionWhereUniqueInput {
  id: ID
}

input OptionWhereInput {
  AND: [OptionWhereInput!]
  OR: [OptionWhereInput!]
  NOT: [OptionWhereInput!]
  id: IDFilter
  description: StringFilter
}

input OptionOrderByInput {
  id: OrderDirection
  description: OrderDirection
}

input OptionUpdateInput {
  description: String
}

input OptionUpdateArgs {
  where: OptionWhereUniqueInput!
  data: OptionUpdateInput!
}

input OptionCreateInput {
  description: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createTask(data: TaskCreateInput!): Task
  createTasks(data: [TaskCreateInput!]!): [Task]
  updateTask(where: TaskWhereUniqueInput!, data: TaskUpdateInput!): Task
  updateTasks(data: [TaskUpdateArgs!]!): [Task]
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteTasks(where: [TaskWhereUniqueInput!]!): [Task]
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createOption(data: OptionCreateInput!): Option
  createOptions(data: [OptionCreateInput!]!): [Option]
  updateOption(where: OptionWhereUniqueInput!, data: OptionUpdateInput!): Option
  updateOptions(data: [OptionUpdateArgs!]!): [Option]
  deleteOption(where: OptionWhereUniqueInput!): Option
  deleteOptions(where: [OptionWhereUniqueInput!]!): [Option]
}

type Query {
  tasks(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TaskWhereUniqueInput): [Task!]
  task(where: TaskWhereUniqueInput!): Task
  tasksCount(where: TaskWhereInput! = {}): Int
  people(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  person(where: PersonWhereUniqueInput!): Person
  peopleCount(where: PersonWhereInput! = {}): Int
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  options(where: OptionWhereInput! = {}, orderBy: [OptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OptionWhereUniqueInput): [Option!]
  option(where: OptionWhereUniqueInput!): Option
  optionsCount(where: OptionWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
