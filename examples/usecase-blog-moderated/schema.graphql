# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Post {
  id: ID!
  title: String
  content: String
  hidden: Boolean
  createdBy: Contributor
  createdAt: DateTime
  updatedAt: DateTime
  hiddenBy: Moderator
  hiddenAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
  hidden: BooleanFilter
  createdBy: ContributorWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  hiddenBy: ModeratorWhereInput
  hiddenAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
  hidden: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  hiddenAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostUpdateInput {
  title: String
  content: String
  hidden: Boolean
  createdBy: ContributorRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  hiddenBy: ModeratorRelateToOneForUpdateInput
  hiddenAt: DateTime
}

input ContributorRelateToOneForUpdateInput {
  create: ContributorCreateInput
  connect: ContributorWhereUniqueInput
  disconnect: Boolean
}

input ModeratorRelateToOneForUpdateInput {
  create: ModeratorCreateInput
  connect: ModeratorWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: String
  hidden: Boolean
  createdBy: ContributorRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  hiddenBy: ModeratorRelateToOneForCreateInput
  hiddenAt: DateTime
}

input ContributorRelateToOneForCreateInput {
  create: ContributorCreateInput
  connect: ContributorWhereUniqueInput
}

input ModeratorRelateToOneForCreateInput {
  create: ModeratorCreateInput
  connect: ModeratorWhereUniqueInput
}

type Contributor {
  id: ID!
  bio: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input ContributorWhereUniqueInput {
  id: ID
}

input ContributorWhereInput {
  AND: [ContributorWhereInput!]
  OR: [ContributorWhereInput!]
  NOT: [ContributorWhereInput!]
  id: IDFilter
  bio: StringFilter
  posts: PostManyRelationFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input ContributorOrderByInput {
  id: OrderDirection
  bio: OrderDirection
}

input ContributorUpdateInput {
  bio: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input ContributorUpdateArgs {
  where: ContributorWhereUniqueInput!
  data: ContributorUpdateInput!
}

input ContributorCreateInput {
  bio: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Moderator {
  id: ID!
  hidden(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  hiddenCount(where: PostWhereInput! = {}): Int
}

input ModeratorWhereUniqueInput {
  id: ID
}

input ModeratorWhereInput {
  AND: [ModeratorWhereInput!]
  OR: [ModeratorWhereInput!]
  NOT: [ModeratorWhereInput!]
  id: IDFilter
  hidden: PostManyRelationFilter
}

input ModeratorOrderByInput {
  id: OrderDirection
}

input ModeratorUpdateInput {
  hidden: PostRelateToManyForUpdateInput
}

input ModeratorUpdateArgs {
  where: ModeratorWhereUniqueInput!
  data: ModeratorUpdateInput!
}

input ModeratorCreateInput {
  hidden: PostRelateToManyForCreateInput
}

type User {
  id: ID!
  name: String
  admin: Boolean
  contributor: Contributor
  moderator: Moderator
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  admin: BooleanFilter
  contributor: ContributorWhereInput
  moderator: ModeratorWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  admin: OrderDirection
}

input UserUpdateInput {
  name: String
  admin: Boolean
  contributor: ContributorRelateToOneForUpdateInput
  moderator: ModeratorRelateToOneForUpdateInput
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  admin: Boolean
  contributor: ContributorRelateToOneForCreateInput
  moderator: ModeratorRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createContributor(data: ContributorCreateInput!): Contributor
  createContributors(data: [ContributorCreateInput!]!): [Contributor]
  updateContributor(where: ContributorWhereUniqueInput!, data: ContributorUpdateInput!): Contributor
  updateContributors(data: [ContributorUpdateArgs!]!): [Contributor]
  deleteContributor(where: ContributorWhereUniqueInput!): Contributor
  deleteContributors(where: [ContributorWhereUniqueInput!]!): [Contributor]
  createModerator(data: ModeratorCreateInput!): Moderator
  createModerators(data: [ModeratorCreateInput!]!): [Moderator]
  updateModerator(where: ModeratorWhereUniqueInput!, data: ModeratorUpdateInput!): Moderator
  updateModerators(data: [ModeratorUpdateArgs!]!): [Moderator]
  deleteModerator(where: ModeratorWhereUniqueInput!): Moderator
  deleteModerators(where: [ModeratorWhereUniqueInput!]!): [Moderator]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
}

type Query {
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  contributor(where: ContributorWhereUniqueInput!): Contributor
  contributors(where: ContributorWhereInput! = {}, orderBy: [ContributorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContributorWhereUniqueInput): [Contributor!]
  contributorsCount(where: ContributorWhereInput! = {}): Int
  moderator(where: ModeratorWhereUniqueInput!): Moderator
  moderators(where: ModeratorWhereInput! = {}, orderBy: [ModeratorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ModeratorWhereUniqueInput): [Moderator!]
  moderatorsCount(where: ModeratorWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
