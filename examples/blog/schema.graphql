type Post {
  id: ID!
  title: String
  status: PostStatusType
  content: String
  publishDate: String
  author: Author
}

enum PostStatusType {
  draft
  published
}

type Author {
  id: ID!
  name: String
  email: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [SortPostsBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]!
  postsCount(where: PostWhereInput! = {}): Int!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IntFilter
  title: StringNullableFilter
  status: StringNullableFilter
  content: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: AuthorWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedDateTimeNullableFilter
}

input AuthorWhereInput {
  AND: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  NOT: [AuthorWhereInput!]
  id: IntFilter
  name: StringNullableFilter
  email: StringNullableFilter
  posts: PostsRelationFilter
}

input PostsRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input SortPostsBy {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  content: OrderDirection
  publishDate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostWhereUniqueInput {
  id: ID
}

input AuthorWhereUniqueInput {
  id: ID
}

input SortAuthorsBy {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

type Mutation {
  createPost(data: PostCreateInput! = {}): Post!
  createPosts(data: [PostCreateInput!]!): [Post!]!
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post!
  updatePosts(data: [PostsUpdateInput!]!): [Post!]!
  deletePost(where: PostWhereUniqueInput!): Post!
  deletePosts(where: [PostWhereUniqueInput!]!): [Post!]!
  createAuthor(data: AuthorCreateInput! = {}): Author!
  createAuthors(data: [AuthorCreateInput!]!): [Author!]!
  updateAuthor(
    where: AuthorWhereUniqueInput!
    data: AuthorUpdateInput!
  ): Author!
  updateAuthors(data: [AuthorsUpdateInput!]!): [Author!]!
  deleteAuthor(where: AuthorWhereUniqueInput!): Author!
  deleteAuthors(where: [AuthorWhereUniqueInput!]!): [Author!]!
}

input PostCreateInput {
  title: String
  status: PostStatusType
  content: String
  publishDate: String
  author: AuthorRelateToOneForCreateInput
}

input AuthorRelateToOneForCreateInput {
  create: AuthorCreateInput
  connect: AuthorWhereUniqueInput
}

input AuthorCreateInput {
  name: String
  email: String
  posts: PostRelateToManyForCreateInput! = { create: [], connect: [] }
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]! = []
  connect: [PostWhereUniqueInput!]! = []
}

input PostUpdateInput {
  title: String
  status: PostStatusType
  content: String
  publishDate: String
  author: AuthorRelateToOneForUpdateInput
}

input AuthorRelateToOneForUpdateInput {
  create: AuthorCreateInput
  connect: AuthorWhereUniqueInput
}

input PostsUpdateInput {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input AuthorUpdateInput {
  name: String
  email: String
  posts: PostRelateToManyForUpdateInput! = {
    create: []
    connect: []
    disconnect: []
    disconnectAll: false
  }
}

input PostRelateToManyForUpdateInput {
  create: [PostCreateInput!]! = []
  connect: [PostWhereUniqueInput!]! = []
  disconnect: [PostWhereUniqueInput!]! = []
  disconnectAll: Boolean! = false
}

input AuthorsUpdateInput {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateInput!
}

type Query {
  Post(where: PostWhereUniqueInput!): Post
  allPosts(
    where: PostWhereInput! = {}
    orderBy: [SortPostsBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]!
  allPostsCount(where: PostWhereInput! = {}): Int!
  Author(where: AuthorWhereUniqueInput!): Author
  allAuthors(
    where: AuthorWhereInput! = {}
    orderBy: [SortAuthorsBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Author!]!
  allAuthorsCount(where: AuthorWhereInput! = {}): Int!
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
