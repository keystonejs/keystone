type Todo {
  id: ID!
  label: String
  isComplete: Boolean
  assignedTo: User
  finishBy: String
  createdAt: String
  updatedAt: String
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState!
  tasks(
    where: TodoWhereInput! = {}
    orderBy: [SortTodosBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Todo!]!
  tasksCount(where: TodoWhereInput! = {}): Int!
  createdAt: String
  updatedAt: String
}

type PasswordState {
  isSet: Boolean!
}

input TodoWhereInput {
  AND: [TodoWhereInput!]
  OR: [TodoWhereInput!]
  NOT: [TodoWhereInput!]
  id: IntFilter
  label: StringNullableFilter
  isComplete: BoolNullableFilter
  assignedTo: UserWhereInput
  finishBy: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  name: StringNullableFilter
  email: StringNullableFilter
  password: PasswordFieldFilter
  tasks: TodosRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PasswordFieldFilter {
  isSet: Boolean!
}

input TodosRelationFilter {
  every: TodoWhereInput
  some: TodoWhereInput
  none: TodoWhereInput
}

input DateTimeNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedDateTimeNullableFilter
}

input SortTodosBy {
  id: OrderDirection
  label: OrderDirection
  isComplete: OrderDirection
  finishBy: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input TodoWhereUniqueInput {
  id: ID
}

input UserWhereUniqueInput {
  id: ID
}

input SortUsersBy {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

type Mutation {
  createTodo(data: TodoCreateInput! = {}): Todo!
  createTodos(data: [TodoCreateInput!]!): [Todo!]!
  updateTodo(where: TodoWhereUniqueInput!, data: TodoUpdateInput!): Todo!
  updateTodos(data: [TodosUpdateInput!]!): [Todo!]!
  deleteTodo(where: TodoWhereUniqueInput!): Todo!
  deleteTodos(where: [TodoWhereUniqueInput!]!): [Todo!]!
  createUser(data: UserCreateInput! = {}): User!
  createUsers(data: [UserCreateInput!]!): [User!]!
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User!
  updateUsers(data: [UsersUpdateInput!]!): [User!]!
  deleteUser(where: UserWhereUniqueInput!): User!
  deleteUsers(where: [UserWhereUniqueInput!]!): [User!]!
}

input TodoCreateInput {
  label: String
  isComplete: Boolean
  assignedTo: UserRelateToOneForCreateInput
  finishBy: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  tasks: TodoRelateToManyForCreateInput! = { create: [], connect: [] }
}

input TodoRelateToManyForCreateInput {
  create: [TodoCreateInput!]! = []
  connect: [TodoWhereUniqueInput!]! = []
}

input TodoUpdateInput {
  label: String
  isComplete: Boolean
  assignedTo: UserRelateToOneForUpdateInput
  finishBy: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TodosUpdateInput {
  where: TodoWhereUniqueInput!
  data: TodoUpdateInput!
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  tasks: TodoRelateToManyForUpdateInput! = {
    create: []
    connect: []
    disconnect: []
    disconnectAll: false
  }
}

input TodoRelateToManyForUpdateInput {
  create: [TodoCreateInput!]! = []
  connect: [TodoWhereUniqueInput!]! = []
  disconnect: [TodoWhereUniqueInput!]! = []
  disconnectAll: Boolean! = false
}

input UsersUpdateInput {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

type Query {
  Todo(where: TodoWhereUniqueInput!): Todo
  allTodos(
    where: TodoWhereInput! = {}
    orderBy: [SortTodosBy!]! = []
    first: Int
    skip: Int! = 0
  ): [Todo!]!
  allTodosCount(where: TodoWhereInput! = {}): Int!
  User(where: UserWhereUniqueInput!): User
  allUsers(
    where: UserWhereInput! = {}
    orderBy: [SortUsersBy!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]!
  allUsersCount(where: UserWhereInput! = {}): Int!
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
