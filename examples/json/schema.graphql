# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Package {
  id: ID!
  label: String
  pkgjson: JSON
  isPrivate: Boolean
  ownedBy: Person
}

input PackageWhereUniqueInput {
  id: ID
}

input PackageWhereInput {
  AND: [PackageWhereInput!]
  OR: [PackageWhereInput!]
  NOT: [PackageWhereInput!]
  id: IDFilter
  label: StringFilter
  isPrivate: BooleanFilter
  ownedBy: PersonWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PackageOrderByInput {
  id: OrderDirection
  label: OrderDirection
  isPrivate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PackageUpdateInput {
  label: String
  pkgjson: JSON
  isPrivate: Boolean
  ownedBy: PersonRelateToOneForUpdateInput
}

input PersonRelateToOneForUpdateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
}

input PackageUpdateArgs {
  where: PackageWhereUniqueInput!
  data: PackageUpdateInput!
}

input PackageCreateInput {
  label: String
  pkgjson: JSON
  isPrivate: Boolean
  ownedBy: PersonRelateToOneForCreateInput
}

input PersonRelateToOneForCreateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}

type Person {
  id: ID!
  name: String
  packages(where: PackageWhereInput! = {}, orderBy: [PackageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Package!]
  packagesCount(where: PackageWhereInput! = {}): Int
}

input PersonWhereUniqueInput {
  id: ID
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  name: StringFilter
  packages: PackageManyRelationFilter
}

input PackageManyRelationFilter {
  every: PackageWhereInput
  some: PackageWhereInput
  none: PackageWhereInput
}

input PersonOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PersonUpdateInput {
  name: String
  packages: PackageRelateToManyForUpdateInput
}

input PackageRelateToManyForUpdateInput {
  disconnect: [PackageWhereUniqueInput!]
  set: [PackageWhereUniqueInput!]
  create: [PackageCreateInput!]
  connect: [PackageWhereUniqueInput!]
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  name: String
  packages: PackageRelateToManyForCreateInput
}

input PackageRelateToManyForCreateInput {
  create: [PackageCreateInput!]
  connect: [PackageWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createPackage(data: PackageCreateInput!): Package
  createPackages(data: [PackageCreateInput!]!): [Package]
  updatePackage(where: PackageWhereUniqueInput!, data: PackageUpdateInput!): Package
  updatePackages(data: [PackageUpdateArgs!]!): [Package]
  deletePackage(where: PackageWhereUniqueInput!): Package
  deletePackages(where: [PackageWhereUniqueInput!]!): [Package]
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
}

type Query {
  packages(where: PackageWhereInput! = {}, orderBy: [PackageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Package!]
  package(where: PackageWhereUniqueInput!): Package
  packagesCount(where: PackageWhereInput! = {}): Int
  people(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0): [Person!]
  person(where: PersonWhereUniqueInput!): Person
  peopleCount(where: PersonWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
