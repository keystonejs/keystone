type Package {
  id: ID!
  label: String
  pkgjson: JSON
  isPrivate: Boolean
  ownedBy: Person
}

input PackageWhereInput {
  AND: [PackageWhereInput!]
  OR: [PackageWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  label: String
  label_not: String
  label_contains: String
  label_not_contains: String
  label_in: [String]
  label_not_in: [String]
  isPrivate: Boolean
  isPrivate_not: Boolean
  ownedBy: PersonWhereInput
  ownedBy_is_null: Boolean
}

input PackageWhereUniqueInput {
  id: ID
}

enum SortPackagesBy {
  id_ASC
  id_DESC
  label_ASC
  label_DESC
  isPrivate_ASC
  isPrivate_DESC
}

input PackageOrderByInput {
  id: OrderDirection
  label: OrderDirection
  isPrivate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PackageUpdateInput {
  label: String
  pkgjson: JSON
  isPrivate: Boolean
  ownedBy: PersonRelateToOneInput
}

input PersonRelateToOneInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
  disconnect: PersonWhereUniqueInput
  disconnectAll: Boolean
}

input PackagesUpdateInput {
  id: ID!
  data: PackageUpdateInput
}

input PackageCreateInput {
  label: String
  pkgjson: JSON
  isPrivate: Boolean
  ownedBy: PersonRelateToOneInput
}

input PackagesCreateInput {
  data: PackageCreateInput
}

type Person {
  id: ID!
  name: String
  packages(
    where: PackageWhereInput! = {}
    search: String
    sortBy: [SortPackagesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PackageOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Package!]
  _packagesMeta(
    where: PackageWhereInput! = {}
    search: String
    sortBy: [SortPackagesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PackageOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use packagesCount instead."
    )
  packagesCount(where: PackageWhereInput! = {}): Int
}

type _QueryMeta {
  count: Int
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_in: [String]
  name_not_in: [String]
  packages_every: PackageWhereInput
  packages_some: PackageWhereInput
  packages_none: PackageWhereInput
}

input PersonWhereUniqueInput {
  id: ID
}

enum SortPeopleBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input PersonOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PersonUpdateInput {
  name: String
  packages: PackageRelateToManyInput
}

input PackageRelateToManyInput {
  create: [PackageCreateInput]
  connect: [PackageWhereUniqueInput]
  disconnect: [PackageWhereUniqueInput]
  disconnectAll: Boolean
}

input PeopleUpdateInput {
  id: ID!
  data: PersonUpdateInput
}

input PersonCreateInput {
  name: String
  packages: PackageRelateToManyInput
}

input PeopleCreateInput {
  data: PersonCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createPackage(data: PackageCreateInput): Package
  createPackages(data: [PackagesCreateInput]): [Package]
  updatePackage(id: ID!, data: PackageUpdateInput): Package
  updatePackages(data: [PackagesUpdateInput]): [Package]
  deletePackage(id: ID!): Package
  deletePackages(ids: [ID!]): [Package]
  createPerson(data: PersonCreateInput): Person
  createPeople(data: [PeopleCreateInput]): [Person]
  updatePerson(id: ID!, data: PersonUpdateInput): Person
  updatePeople(data: [PeopleUpdateInput]): [Person]
  deletePerson(id: ID!): Person
  deletePeople(ids: [ID!]): [Person]
}

type Query {
  allPackages(
    where: PackageWhereInput! = {}
    search: String
    sortBy: [SortPackagesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PackageOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Package!]
  Package(where: PackageWhereUniqueInput!): Package
  _allPackagesMeta(
    where: PackageWhereInput! = {}
    search: String
    sortBy: [SortPackagesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PackageOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use packagesCount instead."
    )
  packagesCount(where: PackageWhereInput! = {}): Int
  allPeople(
    where: PersonWhereInput! = {}
    search: String
    sortBy: [SortPeopleBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PersonOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Person!]
  Person(where: PersonWhereUniqueInput!): Person
  _allPeopleMeta(
    where: PersonWhereInput! = {}
    search: String
    sortBy: [SortPeopleBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PersonOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use peopleCount instead."
    )
  peopleCount(where: PersonWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
