# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Post {
  id: ID!
  description: String
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupWhereUniqueInput): [Group!]
  groupsCount(where: GroupWhereInput! = {}): Int
  reactions(where: ReactionWhereInput! = {}, orderBy: [ReactionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReactionWhereUniqueInput): [Reaction!]
  reactionsCount(where: ReactionWhereInput! = {}): Int
  logs(where: LogWhereInput! = {}, orderBy: [LogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LogWhereUniqueInput): [Log!]
  logsCount(where: LogWhereInput! = {}): Int
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  description: StringFilter
  groups: GroupManyRelationFilter
  reactions: ReactionManyRelationFilter
  logs: LogManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input GroupManyRelationFilter {
  every: GroupWhereInput
  some: GroupWhereInput
  none: GroupWhereInput
}

input ReactionManyRelationFilter {
  every: ReactionWhereInput
  some: ReactionWhereInput
  none: ReactionWhereInput
}

input LogManyRelationFilter {
  every: LogWhereInput
  some: LogWhereInput
  none: LogWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  description: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostUpdateInput {
  description: String
  groups: GroupRelateToManyForUpdateInput
  reactions: ReactionRelateToManyForUpdateInput
  logs: LogRelateToManyForUpdateInput
}

input GroupRelateToManyForUpdateInput {
  disconnect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  create: [Empty!]
  connect: [GroupWhereUniqueInput!]
}

scalar Empty

input ReactionRelateToManyForUpdateInput {
  disconnect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  create: [Empty!]
  connect: [ReactionWhereUniqueInput!]
}

input LogRelateToManyForUpdateInput {
  disconnect: [LogWhereUniqueInput!]
  set: [LogWhereUniqueInput!]
  create: [LogCreateInput!]
  connect: [LogWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  description: String
  groups: GroupRelateToManyForCreateInput
  reactions: ReactionRelateToManyForCreateInput
  logs: LogRelateToManyForCreateInput
}

input GroupRelateToManyForCreateInput {
  create: [Empty!]
  connect: [GroupWhereUniqueInput!]
}

input ReactionRelateToManyForCreateInput {
  create: [Empty!]
  connect: [ReactionWhereUniqueInput!]
}

input LogRelateToManyForCreateInput {
  create: [LogCreateInput!]
  connect: [LogWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input UserUpdateInput {
  name: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
}

type Category {
  id: ID!
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
}

input CategoryOrderByInput {
  id: OrderDirection
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: Empty
}

type Group {
  id: ID!
}

input GroupWhereUniqueInput {
  id: ID
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IDFilter
}

input GroupOrderByInput {
  id: OrderDirection
}

input GroupUpdateArgs {
  where: GroupWhereUniqueInput!
  data: Empty
}

type Reaction {
  id: ID!
}

input ReactionWhereUniqueInput {
  id: ID
}

input ReactionWhereInput {
  AND: [ReactionWhereInput!]
  OR: [ReactionWhereInput!]
  NOT: [ReactionWhereInput!]
  id: IDFilter
}

input ReactionOrderByInput {
  id: OrderDirection
}

input ReactionUpdateArgs {
  where: ReactionWhereUniqueInput!
  data: Empty
}

type Log {
  id: ID!
  message: String
  createdAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input LogWhereUniqueInput {
  id: ID
}

input LogWhereInput {
  AND: [LogWhereInput!]
  OR: [LogWhereInput!]
  NOT: [LogWhereInput!]
  id: IDFilter
  message: StringFilter
  createdAt: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input LogOrderByInput {
  id: OrderDirection
  message: OrderDirection
  createdAt: OrderDirection
}

input LogUpdateArgs {
  where: LogWhereUniqueInput!
  data: Empty
}

input LogCreateInput {
  message: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCategory(data: Empty): Category
  createCategories(data: [Empty]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: Empty): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createGroup(data: Empty): Group
  createGroups(data: [Empty]!): [Group]
  updateGroup(where: GroupWhereUniqueInput!, data: Empty): Group
  updateGroups(data: [GroupUpdateArgs!]!): [Group]
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteGroups(where: [GroupWhereUniqueInput!]!): [Group]
  createReaction(data: Empty): Reaction
  createReactions(data: [Empty]!): [Reaction]
  updateReaction(where: ReactionWhereUniqueInput!, data: Empty): Reaction
  updateReactions(data: [ReactionUpdateArgs!]!): [Reaction]
  deleteReaction(where: ReactionWhereUniqueInput!): Reaction
  deleteReactions(where: [ReactionWhereUniqueInput!]!): [Reaction]
  createLog(data: LogCreateInput!): Log
  createLogs(data: [LogCreateInput!]!): [Log]
  updateLog(where: LogWhereUniqueInput!, data: Empty): Log
  updateLogs(data: [LogUpdateArgs!]!): [Log]
}

type Query {
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupWhereUniqueInput): [Group!]
  groupsCount(where: GroupWhereInput! = {}): Int
  reaction(where: ReactionWhereUniqueInput!): Reaction
  reactions(where: ReactionWhereInput! = {}, orderBy: [ReactionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReactionWhereUniqueInput): [Reaction!]
  reactionsCount(where: ReactionWhereInput! = {}): Int
  log(where: LogWhereUniqueInput!): Log
  logs(where: LogWhereInput! = {}, orderBy: [LogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LogWhereUniqueInput): [Log!]
  logsCount(where: LogWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
