import { KeystoneGraphQLAPI, KeystoneListsAPI } from '@keystone-next/types';

// NOTE -- these types are commented out in master because they aren't generated by the build (yet)
// To get full List and GraphQL API type support, uncomment them here and use them below
// import type { KeystoneListsTypeInfo } from './.keystone/schema-types';

import { lists } from './schema';

const permissionsList = lists.Role.fields.filter(field => field.startsWith('can'));

export type Session = {
  itemId: string;
  listKey: string;
  data: {
    name: string;
    role?: {
      id: string;
      name: string;
    } & {
      // Dynamically create the type:
      // permissions, is a JS object
      // const permissions = { create: '...', delete: '...' };
      // `typeof` creates a TS type from the object
      // declare const permissions: { create: string; delete: string; };
      // `keyof` creates a string union (array) from the TS type's
      // `key in` allows us to loop over each one
      [key in keyof typeof permissionsList]: boolean;
    };
  };
};

export type ListsAPI = KeystoneListsAPI<any /* KeystoneListsTypeInfo */>;
export type GraphqlAPI = KeystoneGraphQLAPI<any /* KeystoneListsTypeInfo */>;

export type AccessArgs = {
  session?: Session;
  item?: any;
};

export type AccessControl = {
  [key: string]: (args: AccessArgs) => any;
};

export type ListAccessArgs = {
  itemId?: string;
  session?: Session;
};
