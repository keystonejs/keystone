# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Thing {
  id: ID!
  checkbox: Boolean
  password: PasswordState
  toOneRelationship: User
  toManyRelationship(
    where: TodoWhereInput! = {}
    orderBy: [TodoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Todo!]
  toManyRelationshipCount(where: TodoWhereInput! = {}): Int
  toOneRelationshipCard: User
  toManyRelationshipCard(
    where: TodoWhereInput! = {}
    orderBy: [TodoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Todo!]
  toManyRelationshipCardCount(where: TodoWhereInput! = {}): Int
  text: String
  timestamp: DateTime
  calendarDay: CalendarDay
  randomNumberVirtual: Float
  select: String
  selectSegmentedControl: String
  json: JSON
  integer: Int
  bigInt: BigInt
  float: Float
  image: ImageFieldOutput
  file: FileFieldOutput
  document: Thing_document_Document
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

scalar CalendarDay
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

scalar BigInt

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

type Thing_document_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ThingWhereUniqueInput {
  id: ID
}

input ThingWhereInput {
  AND: [ThingWhereInput!]
  OR: [ThingWhereInput!]
  NOT: [ThingWhereInput!]
  id: IDFilter
  checkbox: BooleanFilter
  password: PasswordFilter
  toOneRelationship: UserWhereInput
  toManyRelationship: TodoManyRelationFilter
  toOneRelationshipCard: UserWhereInput
  toManyRelationshipCard: TodoManyRelationFilter
  text: StringFilter
  timestamp: DateTimeNullableFilter
  calendarDay: CalendarDayNullableFilter
  select: StringNullableFilter
  selectSegmentedControl: StringNullableFilter
  integer: IntNullableFilter
  bigInt: BigIntNullableFilter
  float: FloatNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input TodoManyRelationFilter {
  every: TodoWhereInput
  some: TodoWhereInput
  none: TodoWhereInput
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BigIntNullableFilter {
  equals: BigInt
  in: [BigInt!]
  notIn: [BigInt!]
  lt: BigInt
  lte: BigInt
  gt: BigInt
  gte: BigInt
  not: BigIntNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input ThingOrderByInput {
  id: OrderDirection
  checkbox: OrderDirection
  text: OrderDirection
  timestamp: OrderDirection
  calendarDay: OrderDirection
  select: OrderDirection
  selectSegmentedControl: OrderDirection
  integer: OrderDirection
  bigInt: OrderDirection
  float: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ThingUpdateInput {
  checkbox: Boolean
  password: String
  toOneRelationship: UserRelateToOneForUpdateInput
  toManyRelationship: TodoRelateToManyForUpdateInput
  toOneRelationshipCard: UserRelateToOneForUpdateInput
  toManyRelationshipCard: TodoRelateToManyForUpdateInput
  text: String
  timestamp: DateTime
  calendarDay: CalendarDay
  select: String
  selectSegmentedControl: String
  json: JSON
  integer: Int
  bigInt: BigInt
  float: Float
  image: ImageFieldInput
  file: FileFieldInput
  document: JSON
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TodoRelateToManyForUpdateInput {
  disconnect: [TodoWhereUniqueInput!]
  set: [TodoWhereUniqueInput!]
  create: [TodoCreateInput!]
  connect: [TodoWhereUniqueInput!]
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input FileFieldInput {
  upload: Upload!
}

input ThingUpdateArgs {
  where: ThingWhereUniqueInput!
  data: ThingUpdateInput!
}

input ThingCreateInput {
  checkbox: Boolean
  password: String
  toOneRelationship: UserRelateToOneForCreateInput
  toManyRelationship: TodoRelateToManyForCreateInput
  toOneRelationshipCard: UserRelateToOneForCreateInput
  toManyRelationshipCard: TodoRelateToManyForCreateInput
  text: String
  timestamp: DateTime
  calendarDay: CalendarDay
  select: String
  selectSegmentedControl: String
  json: JSON
  integer: Int
  bigInt: BigInt
  float: Float
  image: ImageFieldInput
  file: FileFieldInput
  document: JSON
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TodoRelateToManyForCreateInput {
  create: [TodoCreateInput!]
  connect: [TodoWhereUniqueInput!]
}

type Todo {
  id: ID!
  label: String
  isComplete: Boolean
  assignedTo: User
  finishBy: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input TodoWhereUniqueInput {
  id: ID
}

input TodoWhereInput {
  AND: [TodoWhereInput!]
  OR: [TodoWhereInput!]
  NOT: [TodoWhereInput!]
  id: IDFilter
  label: StringFilter
  isComplete: BooleanFilter
  assignedTo: UserWhereInput
  finishBy: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input TodoOrderByInput {
  id: OrderDirection
  label: OrderDirection
  isComplete: OrderDirection
  finishBy: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TodoUpdateInput {
  label: String
  isComplete: Boolean
  assignedTo: UserRelateToOneForUpdateInput
  finishBy: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input TodoUpdateArgs {
  where: TodoWhereUniqueInput!
  data: TodoUpdateInput!
}

input TodoCreateInput {
  label: String
  isComplete: Boolean
  assignedTo: UserRelateToOneForCreateInput
  finishBy: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  tasks(
    where: TodoWhereInput! = {}
    orderBy: [TodoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Todo!]
  tasksCount(where: TodoWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  tasks: TodoManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  tasks: TodoRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  tasks: TodoRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createThing(data: ThingCreateInput!): Thing
  createThings(data: [ThingCreateInput!]!): [Thing]
  updateThing(where: ThingWhereUniqueInput!, data: ThingUpdateInput!): Thing
  updateThings(data: [ThingUpdateArgs!]!): [Thing]
  deleteThing(where: ThingWhereUniqueInput!): Thing
  deleteThings(where: [ThingWhereUniqueInput!]!): [Thing]
  createTodo(data: TodoCreateInput!): Todo
  createTodos(data: [TodoCreateInput!]!): [Todo]
  updateTodo(where: TodoWhereUniqueInput!, data: TodoUpdateInput!): Todo
  updateTodos(data: [TodoUpdateArgs!]!): [Todo]
  deleteTodo(where: TodoWhereUniqueInput!): Todo
  deleteTodos(where: [TodoWhereUniqueInput!]!): [Todo]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
}

type Query {
  things(
    where: ThingWhereInput! = {}
    orderBy: [ThingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Thing!]
  thing(where: ThingWhereUniqueInput!): Thing
  thingsCount(where: ThingWhereInput! = {}): Int
  todos(
    where: TodoWhereInput! = {}
    orderBy: [TodoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Todo!]
  todo(where: TodoWhereUniqueInput!): Todo
  todosCount(where: TodoWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
