# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Thing {
  id: ID!
  text: String
  timestamp: DateTime
  structure: ThingStructureOutput
  structureNested: ThingStructureNestedOutput
  structureRelationships: ThingStructureRelationshipsOutput
  checkbox: Boolean
  password: PasswordState
  toOneRelationship: User
  toOneRelationshipAlternateLabel: User
  toManyRelationship(where: TodoWhereInput! = {}, orderBy: [TodoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TodoWhereUniqueInput): [Todo!]
  toManyRelationshipCount(where: TodoWhereInput! = {}): Int
  toOneRelationshipCard: User
  toManyRelationshipCard(where: TodoWhereInput! = {}, orderBy: [TodoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TodoWhereUniqueInput): [Todo!]
  toManyRelationshipCardCount(where: TodoWhereInput! = {}): Int
  calendarDay: CalendarDay
  randomNumberVirtual: Float
  select: String
  selectOnSide: String
  selectOnSideItemViewOnly: String
  selectSegmentedControl: String
  multiselect: [String!]
  json: JSON
  integer: Int
  decimal: Decimal
  bigInt: BigInt
  float: Float
  image: ImageFieldOutput
  file: FileFieldOutput
  document: Thing_document_Document
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type ThingStructureOutput {
  structure: ThingStructure
  json(hydrateRelationships: Boolean! = false): JSON
}

type ThingStructure {
  integer: Int
  array: [Int]
}

type ThingStructureNestedOutput {
  structure: [ThingStructureNested]
  json(hydrateRelationships: Boolean! = false): JSON
}

interface ThingStructureNested {
  discriminant: String
}

type ThingStructureRelationshipsOutput {
  structure: [Thing]
  json(hydrateRelationships: Boolean! = false): JSON
}

type PasswordState {
  isSet: Boolean!
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

scalar Decimal

scalar BigInt

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

type Thing_document_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ThingWhereUniqueInput {
  id: ID
  bigInt: BigInt
}

type ThingStructureNestedLeaf implements ThingStructureNested {
  discriminant: String
  value: ThingStructureNestedLeafValue
}

type ThingStructureNestedLeafValue {
  label: String
  url: String
}

type ThingStructureNestedGroup implements ThingStructureNested {
  discriminant: String
  value: ThingStructureNestedGroupValue
}

type ThingStructureNestedGroupValue {
  label: String
  children: [ThingStructureNested]
}

input ThingWhereInput {
  AND: [ThingWhereInput!]
  OR: [ThingWhereInput!]
  NOT: [ThingWhereInput!]
  id: IDFilter
  text: StringFilter
  timestamp: DateTimeNullableFilter
  checkbox: BooleanFilter
  password: PasswordFilter
  toOneRelationship: UserWhereInput
  toOneRelationshipAlternateLabel: UserWhereInput
  toManyRelationship: TodoManyRelationFilter
  toOneRelationshipCard: UserWhereInput
  toManyRelationshipCard: TodoManyRelationFilter
  calendarDay: CalendarDayNullableFilter
  select: StringNullableFilter
  selectOnSide: StringNullableFilter
  selectOnSideItemViewOnly: StringNullableFilter
  selectSegmentedControl: StringNullableFilter
  integer: IntNullableFilter
  decimal: DecimalNullableFilter
  bigInt: BigIntNullableFilter
  float: FloatNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input TodoManyRelationFilter {
  every: TodoWhereInput
  some: TodoWhereInput
  none: TodoWhereInput
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input BigIntNullableFilter {
  equals: BigInt
  in: [BigInt!]
  notIn: [BigInt!]
  lt: BigInt
  lte: BigInt
  gt: BigInt
  gte: BigInt
  not: BigIntNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input ThingOrderByInput {
  id: OrderDirection
  text: OrderDirection
  timestamp: OrderDirection
  checkbox: OrderDirection
  calendarDay: OrderDirection
  select: OrderDirection
  selectOnSide: OrderDirection
  selectOnSideItemViewOnly: OrderDirection
  selectSegmentedControl: OrderDirection
  integer: OrderDirection
  decimal: OrderDirection
  bigInt: OrderDirection
  float: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ThingUpdateInput {
  text: String
  timestamp: DateTime
  structure: ThingStructureUpdateInput
  structureNested: [ThingStructureNestedUpdateInput]
  structureRelationships: [ThingRelateToOneForUpdateInput]
  checkbox: Boolean
  password: String
  toOneRelationship: UserRelateToOneForUpdateInput
  toOneRelationshipAlternateLabel: UserRelateToOneForUpdateInput
  toManyRelationship: TodoRelateToManyForUpdateInput
  toOneRelationshipCard: UserRelateToOneForUpdateInput
  toManyRelationshipCard: TodoRelateToManyForUpdateInput
  calendarDay: CalendarDay
  select: String
  selectOnSide: String
  selectOnSideItemViewOnly: String
  selectSegmentedControl: String
  multiselect: [String!]
  json: JSON
  integer: Int
  decimal: Decimal
  bigInt: BigInt
  float: Float
  image: ImageFieldInput
  file: FileFieldInput
  document: JSON
}

input ThingStructureUpdateInput {
  integer: Int
  array: [Int]
}

input ThingStructureNestedUpdateInput {
  leaf: ThingStructureNestedLeafUpdateInput
  group: ThingStructureNestedGroupUpdateInput
}

input ThingStructureNestedLeafUpdateInput {
  label: String
  url: String
}

input ThingStructureNestedGroupUpdateInput {
  label: String
  children: [ThingStructureNestedUpdateInput]
}

input ThingRelateToOneForUpdateInput {
  create: ThingCreateInput
  connect: ThingWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TodoRelateToManyForUpdateInput {
  disconnect: [TodoWhereUniqueInput!]
  set: [TodoWhereUniqueInput!]
  create: [TodoCreateInput!]
  connect: [TodoWhereUniqueInput!]
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input FileFieldInput {
  upload: Upload!
}

input ThingUpdateArgs {
  where: ThingWhereUniqueInput!
  data: ThingUpdateInput!
}

input ThingCreateInput {
  text: String
  timestamp: DateTime
  structure: ThingStructureCreateInput
  structureNested: [ThingStructureNestedCreateInput]
  structureRelationships: [ThingRelateToOneForCreateInput]
  checkbox: Boolean
  password: String
  toOneRelationship: UserRelateToOneForCreateInput
  toOneRelationshipAlternateLabel: UserRelateToOneForCreateInput
  toManyRelationship: TodoRelateToManyForCreateInput
  toOneRelationshipCard: UserRelateToOneForCreateInput
  toManyRelationshipCard: TodoRelateToManyForCreateInput
  calendarDay: CalendarDay
  select: String
  selectOnSide: String
  selectOnSideItemViewOnly: String
  selectSegmentedControl: String
  multiselect: [String!]
  json: JSON
  integer: Int
  decimal: Decimal
  bigInt: BigInt
  float: Float
  image: ImageFieldInput
  file: FileFieldInput
  document: JSON
}

input ThingStructureCreateInput {
  integer: Int
  array: [Int]
}

input ThingStructureNestedCreateInput {
  leaf: ThingStructureNestedLeafCreateInput
  group: ThingStructureNestedGroupCreateInput
}

input ThingStructureNestedLeafCreateInput {
  label: String
  url: String
}

input ThingStructureNestedGroupCreateInput {
  label: String
  children: [ThingStructureNestedCreateInput]
}

input ThingRelateToOneForCreateInput {
  create: ThingCreateInput
  connect: ThingWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TodoRelateToManyForCreateInput {
  create: [TodoCreateInput!]
  connect: [TodoWhereUniqueInput!]
}

type Todo {
  id: ID!
  label: String
  isComplete: Boolean
  assignedTo: User
  finishBy: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input TodoWhereUniqueInput {
  id: ID
}

input TodoWhereInput {
  AND: [TodoWhereInput!]
  OR: [TodoWhereInput!]
  NOT: [TodoWhereInput!]
  id: IDFilter
  label: StringFilter
  isComplete: BooleanFilter
  assignedTo: UserWhereInput
  finishBy: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input TodoOrderByInput {
  id: OrderDirection
  label: OrderDirection
  isComplete: OrderDirection
  finishBy: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TodoUpdateInput {
  label: String
  isComplete: Boolean
  assignedTo: UserRelateToOneForUpdateInput
  finishBy: DateTime
}

input TodoUpdateArgs {
  where: TodoWhereUniqueInput!
  data: TodoUpdateInput!
}

input TodoCreateInput {
  label: String
  isComplete: Boolean
  assignedTo: UserRelateToOneForCreateInput
  finishBy: DateTime
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  tasks(where: TodoWhereInput! = {}, orderBy: [TodoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TodoWhereUniqueInput): [Todo!]
  tasksCount(where: TodoWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  tasks: TodoManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  tasks: TodoRelateToManyForUpdateInput
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  tasks: TodoRelateToManyForCreateInput
}

type Settings {
  id: ID!
  websiteName: String
  copyrightText: String
  something: BigInt
}

input SettingsWhereUniqueInput {
  id: ID
  something: BigInt
}

input SettingsWhereInput {
  AND: [SettingsWhereInput!]
  OR: [SettingsWhereInput!]
  NOT: [SettingsWhereInput!]
  id: IDFilter
  websiteName: StringFilter
  copyrightText: StringFilter
  something: BigIntNullableFilter
}

input SettingsOrderByInput {
  id: OrderDirection
  websiteName: OrderDirection
  copyrightText: OrderDirection
  something: OrderDirection
}

input SettingsUpdateInput {
  websiteName: String
  copyrightText: String
  something: BigInt
}

input SettingsUpdateArgs {
  where: SettingsWhereUniqueInput! = {id: 1}
  data: SettingsUpdateInput!
}

input SettingsCreateInput {
  websiteName: String
  copyrightText: String
  something: BigInt
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createThing(data: ThingCreateInput!): Thing
  createThings(data: [ThingCreateInput!]!): [Thing]
  updateThing(where: ThingWhereUniqueInput!, data: ThingUpdateInput!): Thing
  updateThings(data: [ThingUpdateArgs!]!): [Thing]
  deleteThing(where: ThingWhereUniqueInput!): Thing
  deleteThings(where: [ThingWhereUniqueInput!]!): [Thing]
  createTodo(data: TodoCreateInput!): Todo
  createTodos(data: [TodoCreateInput!]!): [Todo]
  updateTodo(where: TodoWhereUniqueInput!, data: TodoUpdateInput!): Todo
  updateTodos(data: [TodoUpdateArgs!]!): [Todo]
  deleteTodo(where: TodoWhereUniqueInput!): Todo
  deleteTodos(where: [TodoWhereUniqueInput!]!): [Todo]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSettings(data: SettingsCreateInput!): Settings
  createManySettings(data: [SettingsCreateInput!]!): [Settings]
  updateSettings(where: SettingsWhereUniqueInput! = {id: 1}, data: SettingsUpdateInput!): Settings
  updateManySettings(data: [SettingsUpdateArgs!]!): [Settings]
  deleteSettings(where: SettingsWhereUniqueInput! = {id: 1}): Settings
  deleteManySettings(where: [SettingsWhereUniqueInput!]!): [Settings]
}

type Query {
  thing(where: ThingWhereUniqueInput!): Thing
  things(where: ThingWhereInput! = {}, orderBy: [ThingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ThingWhereUniqueInput): [Thing!]
  thingsCount(where: ThingWhereInput! = {}): Int
  todo(where: TodoWhereUniqueInput!): Todo
  todos(where: TodoWhereInput! = {}, orderBy: [TodoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TodoWhereUniqueInput): [Todo!]
  todosCount(where: TodoWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  settings(where: SettingsWhereUniqueInput! = {id: 1}): Settings
  manySettings(where: SettingsWhereInput! = {id: {equals: 1}}, orderBy: [SettingsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SettingsWhereUniqueInput): [Settings!]
  manySettingsCount(where: SettingsWhereInput! = {id: {equals: 1}}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
