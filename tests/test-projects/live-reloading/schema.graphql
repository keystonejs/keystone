# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Something {
  id: ID!
  text: String
}

input SomethingWhereUniqueInput {
  id: ID
}

input SomethingWhereInput {
  AND: [SomethingWhereInput!]
  OR: [SomethingWhereInput!]
  NOT: [SomethingWhereInput!]
  id: IDFilter
  text: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input SomethingOrderByInput {
  id: OrderDirection
  text: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SomethingUpdateInput {
  text: String
}

input SomethingUpdateArgs {
  where: SomethingWhereUniqueInput!
  data: SomethingUpdateInput!
}

input SomethingCreateInput {
  text: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createSomething(data: SomethingCreateInput!): Something
  createSomethings(data: [SomethingCreateInput!]!): [Something]
  updateSomething(
    where: SomethingWhereUniqueInput!
    data: SomethingUpdateInput!
  ): Something
  updateSomethings(data: [SomethingUpdateArgs!]!): [Something]
  deleteSomething(where: SomethingWhereUniqueInput!): Something
  deleteSomethings(where: [SomethingWhereUniqueInput!]!): [Something]
}

type Query {
  somethings(
    where: SomethingWhereInput! = {}
    orderBy: [SomethingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Something!]
  something(where: SomethingWhereUniqueInput!): Something
  somethingsCount(where: SomethingWhereInput! = {}): Int
  keystone: KeystoneMeta!
  someNumber: Int
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  models: [KeystoneAdminUIModelMeta!]!
  model(key: String!): KeystoneAdminUIModelMeta
}

type KeystoneAdminUIModelMeta {
  key: String!
  graphqlPlural: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
