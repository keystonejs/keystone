// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`postinstall writes the correct node_modules files 1`] = `
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ node_modules/.keystone/types.ts ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
/* eslint-disable */

export type TodoWhereUniqueInput = {
  readonly id?: string | null
}

export type TodoWhereInput = {
  readonly AND?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null
  readonly OR?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null
  readonly NOT?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null
  readonly id?: IDFilter | null
  readonly title?: StringFilter | null
}

export type IDFilter = {
  readonly equals?: string | null
  readonly in?: ReadonlyArray<string> | string | null
  readonly notIn?: ReadonlyArray<string> | string | null
  readonly lt?: string | null
  readonly lte?: string | null
  readonly gt?: string | null
  readonly gte?: string | null
  readonly not?: IDFilter | null
}

export type StringFilter = {
  readonly equals?: string | null
  readonly in?: ReadonlyArray<string> | string | null
  readonly notIn?: ReadonlyArray<string> | string | null
  readonly lt?: string | null
  readonly lte?: string | null
  readonly gt?: string | null
  readonly gte?: string | null
  readonly contains?: string | null
  readonly startsWith?: string | null
  readonly endsWith?: string | null
  readonly not?: NestedStringFilter | null
}

export type NestedStringFilter = {
  readonly equals?: string | null
  readonly in?: ReadonlyArray<string> | string | null
  readonly notIn?: ReadonlyArray<string> | string | null
  readonly lt?: string | null
  readonly lte?: string | null
  readonly gt?: string | null
  readonly gte?: string | null
  readonly contains?: string | null
  readonly startsWith?: string | null
  readonly endsWith?: string | null
  readonly not?: NestedStringFilter | null
}

export type TodoOrderByInput = {
  readonly id?: OrderDirection | null
  readonly title?: OrderDirection | null
}

export type OrderDirection =
  | 'asc'
  | 'desc'

export type TodoUpdateInput = {
  readonly title?: string | null
}

export type TodoUpdateArgs = {
  readonly where: TodoWhereUniqueInput
  readonly data: TodoUpdateInput
}

export type TodoCreateInput = {
  readonly title?: string | null
}

export type KeystoneAdminUIFieldMetaIsNonNull =
  | 'read'
  | 'create'
  | 'update'

export type KeystoneAdminUIFieldMetaItemViewFieldPosition =
  | 'form'
  | 'sidebar'

export type KeystoneAdminUIFieldMetaListViewFieldMode =
  | 'read'
  | 'hidden'

export type QueryMode =
  | 'default'
  | 'insensitive'

export type KeystoneAdminUIActionMetaItemViewNavigation =
  | 'follow'
  | 'refetch'
  | 'return'

export type KeystoneAdminUIActionMetaListViewActionMode =
  | 'enabled'
  | 'hidden'

export type KeystoneAdminUISortDirection =
  | 'ASC'
  | 'DESC'

type ResolvedTodoCreateInput = {
  id?: import('@prisma/client').Prisma.TodoCreateInput['id']
  title?: import('@prisma/client').Prisma.TodoCreateInput['title']
}
type ResolvedTodoUpdateInput = {
  id?: undefined
  title?: import('@prisma/client').Prisma.TodoUpdateInput['title']
}

export interface Session {}

export declare namespace Lists {
  export type Todo = import('@keystone-6/core/types').ListConfig<Lists.Todo.TypeInfo>
  namespace Todo {
    export type Item = import('@prisma/client').Todo
    export type TypeInfo = {
      key: 'Todo'
      isSingleton: false
      fields: 'id' | 'title'
      actions: never
      item: Item
      inputs: {
        where: TodoWhereInput
        uniqueWhere: TodoWhereUniqueInput
        create: TodoCreateInput
        update: TodoUpdateInput
        orderBy: TodoOrderByInput
      }
      prisma: {
        create: ResolvedTodoCreateInput
        update: ResolvedTodoUpdateInput
      }
      all: __TypeInfo
    }
  }
}
export type Context = import('@keystone-6/core/types').KeystoneContext<TypeInfo>
export type Config = import('@keystone-6/core/types').KeystoneConfig<TypeInfo>

export type TypeInfo = {
  lists: {
    readonly Todo: Lists.Todo.TypeInfo
  }
  prisma: import('@prisma/client').PrismaClient
  session: Session
}

type __TypeInfo = TypeInfo

export type Lists = {
  [Key in keyof TypeInfo['lists']]?: import('@keystone-6/core/types').ListConfig<TypeInfo['lists'][Key]>
} & Record<string, import('@keystone-6/core/types').ListConfig<any>>

export {}

`;
